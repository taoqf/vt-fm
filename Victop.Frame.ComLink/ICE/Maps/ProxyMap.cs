//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.ComLink.ICE.Maps
{
    using slice;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Text;

	/// <summary>
	/// 服务器代理
	/// </summary>
	/// <remarks>服务器代理</remarks>
	public class ProxyMap
	{
        /// <summary>
        /// 代理储存空间，以远端地址与路由字符串进行维护
        /// </summary>
        private Dictionary<string, MessageEndpointPrx> serverProxyMap;
		/// <summary>
		/// 代理储存空间，以远端地址与路由字符串进行维护
		/// </summary>
		public Dictionary<string, MessageEndpointPrx> ServerProxyMap
		{
            get
            {
                if (serverProxyMap == null)
                    serverProxyMap = new Dictionary<string, MessageEndpointPrx>();
                return serverProxyMap;
            }
            set
            {
                serverProxyMap = value;
            }
		}

		/// <summary>
		/// 添加服务器代理
		/// </summary>
        [MethodImpl(MethodImplOptions.Synchronized)]
		public bool AddServerProxy(string proxyId, MessageEndpointPrx serverProxy)
		{
            if (!string.IsNullOrWhiteSpace(proxyId))
            {
                MessageEndpointPrx messagePorxy = FindServerProxy(proxyId);
                if (messagePorxy != null)
                {
                    if (!serverProxy.Equals(messagePorxy))
                    {
                        DelServerProxy(proxyId);
                        ServerProxyMap.Add(proxyId, serverProxy);
                    }
                }
                else
                {
                    serverProxyMap.Add(proxyId, serverProxy);
                }
                return true;
            }
            return false;
		}

		/// <summary>
		/// 从服务器代理列表中获取已经存在的代理.
		/// </summary>
        [MethodImpl(MethodImplOptions.Synchronized)]
		public MessageEndpointPrx FindServerProxy(string proxyId)
		{
            MessageEndpointPrx messageProxy = null;
            if (ServerProxyMap.ContainsKey(proxyId))
            {
                messageProxy=ServerProxyMap[proxyId];
            }
            return messageProxy;
		}

		/// <summary>
		/// 移除服务代理
		/// </summary>
        [MethodImpl(MethodImplOptions.Synchronized)]
		public bool DelServerProxy(string proxyId)
		{
            if (!string.IsNullOrWhiteSpace(proxyId) && ServerProxyMap.ContainsKey(proxyId))
            {
                ServerProxyMap.Remove(proxyId);
                return true;
            }
            return false;
		}

	}
}

