//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.ComLink.ICE.Maps
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Text;
    using Victop.Frame.CoreLibrary.Models;

	/// <summary>
	/// 通信通道缓存
	/// </summary>
	/// <remarks>通信通道缓存</remarks>
	public class ChannelMap
	{
		/// <summary>
		/// 发送者与连接串对应关系
		/// </summary>
        private Dictionary<string, HashSet<ServerRouterInfo>> senderAndLinkMap = new Dictionary<string, HashSet<ServerRouterInfo>>();

		/// <summary>
		/// 路由与发送者对应关系
		/// </summary>
        private Dictionary<string, HashSet<string>> routerAndSenderMap = new Dictionary<string, HashSet<string>>();

		/// <summary>
		/// 依据路由地址查询发送者标识
		/// </summary>
        [MethodImpl(MethodImplOptions.Synchronized)]
        private HashSet<string> FindSenderInfoByRouter(string routerUrl)
		{
            HashSet<string> SenderId = null;
            if (routerAndSenderMap.ContainsKey(routerUrl))
            {
                SenderId = routerAndSenderMap[routerUrl];
            }
            return SenderId;
		}

		/// <summary>
		/// 通过发送者标识查找连接串
		/// </summary>
        [MethodImpl(MethodImplOptions.Synchronized)]
        private HashSet<ServerRouterInfo> FindLinkInfoBySender(string senderId)
		{
            HashSet<ServerRouterInfo> LinkInfo = null;
            if (senderAndLinkMap.ContainsKey(senderId))
            {
                LinkInfo = senderAndLinkMap[senderId];
            }
            return LinkInfo;
		}

		/// <summary>
		/// 添加对应关系
		/// </summary>
		public void AddChannelInfo(string senderId, string serverUrl, string routerUrl)
		{
			// 组合得到字符串标示
            HashSet<ServerRouterInfo> LinkInfo;
            if (senderId != null && senderId.Trim().Length > 0)
            {
                // 从缓存中读取连接的列表，如果没有获取列表就新建一个列表，将发送者ID与连接串配对缓存起来
                LinkInfo = FindLinkInfoBySender(senderId);
                if (LinkInfo == null)
                {
                    LinkInfo = new HashSet<ServerRouterInfo>();
                    LinkInfo.Add(new ServerRouterInfo() { ServerUrl = serverUrl, RouterUrl = routerUrl });
                    senderAndLinkMap.Add(senderId, LinkInfo);
                }
                else
                {
                    LinkInfo.Add(new ServerRouterInfo() { ServerUrl = serverUrl, RouterUrl = routerUrl });
                }
                if (routerUrl != null && routerUrl.Trim().Length > 0)
                {
                    // 如果携带有路由信息，单独对路由地址和发送者ID进行维护
                    HashSet<string> RouterInfo = FindSenderInfoByRouter(routerUrl);
                    if (RouterInfo == null)
                    {
                        RouterInfo = new HashSet<string>();
                        RouterInfo.Add(senderId);
                        routerAndSenderMap.Add(routerUrl, RouterInfo);
                    }
                    else
                    {
                        RouterInfo.Add(senderId);
                    }
                }
            }
		}

		/// <summary>
		/// 移除对应关系
		/// </summary>
		public void RemoveChannelInfo(string senderId)
		{
            senderAndLinkMap.Remove(senderId);
		}

		/// <summary>
		/// 查找缓存中是否已经有记录
		/// </summary>
        public bool ContainChannelInfo(string senderId, string serverUrl, string routerUrl)
		{
            if (!string.IsNullOrEmpty(senderId))
            {
                HashSet<ServerRouterInfo> ServerInfoList = FindLinkInfoBySender(senderId);
                if (ServerInfoList != null && ServerInfoList.Count > 0)
                {
                    return ServerInfoList.Any(it => it.ServerUrl == serverUrl && it.RouterUrl == routerUrl);
                }
            }
            return false;
		}

	}
}

