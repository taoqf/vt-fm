//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.ComLink.ICE.Maps
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Text;

	/// <summary>
	/// 路由适配器
	/// </summary>
	/// <remarks>路由适配器</remarks>
	public class RouterMap
	{
        private Dictionary<string, RouterEntry> routerMaps;
		/// <summary>
		/// 路由适配器储存空间，以路由器连接URL进行维护
		/// </summary>
        public Dictionary<string, RouterEntry> RouterMaps
		{
            get
            {
                if (routerMaps == null)
                    routerMaps = new Dictionary<string, RouterEntry>();
                return routerMaps;
            }
            set
            {
                routerMaps = value;
            }
		}

		/// <summary>
		/// 添加路由适配器
		/// </summary>
        [MethodImpl(MethodImplOptions.Synchronized)]
		public bool AddRouterEntry(string routerAddress, RouterEntry routerEntry)
		{
            if (!string.IsNullOrWhiteSpace(routerAddress) && routerEntry != null)
            {
                RouterEntry entry = FindRouterEntry(routerAddress);
                if (entry != null)
                {
                    if (!routerEntry.Equals(entry))
                    {
                        DelRouterEntry(routerAddress);
                        RouterMaps.Add(routerAddress, routerEntry);
                    }
                }
                else
                {
                    RouterMaps.Add(routerAddress, routerEntry);
                }
                return true;
            }
            return false;
		}

		/// <summary>
		/// 查询路由适配器
		/// </summary>
		public RouterEntry FindRouterEntry(string routerAddress)
		{
            RouterEntry routerEntry = null;
            if (RouterMaps.ContainsKey(routerAddress))
            {
                routerEntry=RouterMaps[routerAddress];
            }
            return routerEntry;
		}

		/// <summary>
		/// 删除路由适配器
		/// </summary>
		public bool DelRouterEntry(string routerAddress)
		{
            if (RouterMaps.ContainsKey(routerAddress))
            {
                RouterMaps.Remove(routerAddress);
                return true;
            }
            return false;
		}

		/// <summary>
        /// 清理路由适配器
		/// </summary>
		public bool ClearRouterMap()
		{
            RouterMaps.Clear();
            return true;
		}

	}
}

