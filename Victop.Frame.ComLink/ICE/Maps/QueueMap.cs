//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.ComLink.ICE.Maps
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Text;

	/// <summary>
	/// 队列缓存
	/// </summary>
	/// <remarks>队列缓存</remarks>
	public class QueueMap
	{
        private Dictionary<string, QueueEntry> queueEntries;
		/// <summary>
		/// 队列列表
		/// </summary>
		public Dictionary<string, QueueEntry> QueueEntries
		{
            get
            {
                if (queueEntries == null)
                    queueEntries = new Dictionary<string, QueueEntry>();
                return queueEntries;
            }
            set
            {
                queueEntries = value;
            }
		}

		/// <summary>
		/// 添加条目
		/// </summary>
		public bool AddEntry(string entryName, QueueEntry queueEntry)
		{
            if (!string.IsNullOrWhiteSpace(entryName) && queueEntry != null)
            {
                QueueEntry entry = FindEntry(entryName);
                if (entry != null)
                {
                    if (!queueEntry.Equals(entry))
                    {
                        RemoveEntry(entryName);
                        QueueEntries.Add(entryName, queueEntry);
                    }
                }
                else
                {
                    QueueEntries.Add(entryName, queueEntry);
                }
                return true;
            }
            return false;
		}

		/// <summary>
		/// 查询条目
		/// </summary>
		public QueueEntry FindEntry(string entryName)
		{
            QueueEntry queueEntry = null;
            if (QueueEntries.ContainsKey(entryName))
            {
                queueEntry=QueueEntries[entryName];
            }
            return queueEntry;
		}

		/// <summary>
		/// 移除条目
		/// </summary>
		public bool RemoveEntry(string entryName)
		{
            if (QueueEntries.ContainsKey(entryName))
            {
                QueueEntries.Remove(entryName);
                return true;
            }
            else
            {
                return false;
            }
		}
        /// <summary>
        /// 创建队列
        /// </summary>
        /// <param name="entryName"></param>
        /// <param name="entrySize"></param>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.Synchronized)]
		public Queue<object> CreateQueue(string entryName, long entrySize)
		{
            QueueEntry queueEntry = FindEntry(entryName);
            if (queueEntry == null)
            {
                queueEntry = new QueueEntry() { Size = entrySize, Name = entryName };
                QueueEntries.Add(entryName, queueEntry);
            }
            return queueEntry.Entries;
		}
        /// <summary>
        /// 查找队列
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.Synchronized)]
        public Queue<object> GetQueue(string name)
        {
            QueueEntry qEntry = FindEntry(name);
            return qEntry.Entries;
        }

		/// <summary>
		/// 清理队列条目
		/// </summary>
		public bool ClearQueueEntries()
		{
            QueueEntries.Clear();
            return true;
		}

	}
}

