//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.ComLink.ICE.Maps
{
    using slice;
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Text;
    using System.Threading;

	/// <summary>
	/// 回调代理
	/// </summary>
	/// <remarks>回调代理</remarks>
	public class CallbackMap
	{
        private Dictionary<String, MessageEndpointPrx> callbackMaps = new Dictionary<string, MessageEndpointPrx>();
		/// <summary>
		/// 回调代理储存空间
		/// </summary>
		public Dictionary<String, MessageEndpointPrx> CallbackMaps
		{
            get
            {
                if (callbackMaps == null)
                    callbackMaps = new Dictionary<string, MessageEndpointPrx>();
                return callbackMaps;
            }
            set { callbackMaps = value; }
		}

		/// <summary>
		/// 添加回调代理
		/// </summary>
        [MethodImpl(MethodImplOptions.Synchronized)]
		public bool AddCallBack(string proxyId, MessageEndpointPrx callBackProxy)
		{
            if (proxyId != null && proxyId.Trim().Length > 0 && callBackProxy != null)
            {
                MessageEndpointPrx callback = FindCallBack(proxyId);
                if (callback != null)
                {
                    if (callback.Equals(callBackProxy))
                    {
                        return true;
                    }
                }
                CallbackMaps.Add(proxyId, callBackProxy);
                return true;
            }
            return false;
		}

		/// <summary>
		/// 查询回调代理
		/// </summary>
        [MethodImpl(MethodImplOptions.Synchronized)]
        public MessageEndpointPrx FindCallBack(string proxyId)
		{
            MessageEndpointPrx callback = null;
            if (CallbackMaps.ContainsKey(proxyId))
            {
                callback = CallbackMaps[proxyId];
            }
            return callback;
		}

		/// <summary>
		/// 移除回调代理
		/// </summary>
        [MethodImpl(MethodImplOptions.Synchronized)]
		public void DelCallback(string proxyId)
		{
            MessageEndpointPrx callback = FindCallBack(proxyId);
            if (callback != null)
            {
                ThreadPool.QueueUserWorkItem(new WaitCallback(DestroyProxyTask), callback);
            }
            CallbackMaps.Remove(proxyId);
		}

		private void DestroyProxyTask(Object proxy)
		{
            try
            {
                MessageEndpointPrx callback = (MessageEndpointPrx)proxy;
                callback.ice_ping();
                callback.destroy();
            }
            catch (Exception ex)
            {
            }
		}

	}
}

