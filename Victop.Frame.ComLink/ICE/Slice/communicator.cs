// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

// <auto-generated>
//
// Generated from file `communicator.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace slice
{
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Reply : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public int replyMode;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string replyContent;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public Reply()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public Reply(int replyMode, string replyContent)
        {
            this.replyMode = replyMode;
            this.replyContent = replyContent;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public override int GetHashCode()
        {
            int h__ = 0;
            h__ = 5 * h__ + replyMode.GetHashCode();
            if (replyContent != null)
            {
                h__ = 5 * h__ + replyContent.GetHashCode();
            }
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public override bool Equals(object other__)
        {
            if (object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if (other__ == null)
            {
                return false;
            }
            if (GetType() != other__.GetType())
            {
                return false;
            }
            Reply o__ = (Reply)other__;
            if (!replyMode.Equals(o__.replyMode))
            {
                return false;
            }
            if (replyContent == null)
            {
                if (o__.replyContent != null)
                {
                    return false;
                }
            }
            else
            {
                if (!replyContent.Equals(o__.replyContent))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public static bool operator ==(Reply lhs__, Reply rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public static bool operator !=(Reply lhs__, Reply rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(replyMode);
            os__.writeString(replyContent);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            replyMode = is__.readInt();
            replyContent = is__.readString();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class Message : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string messageID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string routerAddress;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string receiptAddress;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string receiptSessionID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string senderSessionID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string fromID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string fromRole;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string toID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string toRole;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string replyToID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string messageType;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string messageControl;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string messageContent;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public string sessionId;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public Message()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public Message(string messageID, string routerAddress, string receiptAddress, string receiptSessionID, string senderSessionID, string fromID, string fromRole, string toID, string toRole, string replyToID, string messageType, string messageControl, string messageContent, string sessionId)
        {
            this.messageID = messageID;
            this.routerAddress = routerAddress;
            this.receiptAddress = receiptAddress;
            this.receiptSessionID = receiptSessionID;
            this.senderSessionID = senderSessionID;
            this.fromID = fromID;
            this.fromRole = fromRole;
            this.toID = toID;
            this.toRole = toRole;
            this.replyToID = replyToID;
            this.messageType = messageType;
            this.messageControl = messageControl;
            this.messageContent = messageContent;
            this.sessionId = sessionId;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public override int GetHashCode()
        {
            int h__ = 0;
            if (messageID != null)
            {
                h__ = 5 * h__ + messageID.GetHashCode();
            }
            if (routerAddress != null)
            {
                h__ = 5 * h__ + routerAddress.GetHashCode();
            }
            if (receiptAddress != null)
            {
                h__ = 5 * h__ + receiptAddress.GetHashCode();
            }
            if (receiptSessionID != null)
            {
                h__ = 5 * h__ + receiptSessionID.GetHashCode();
            }
            if (senderSessionID != null)
            {
                h__ = 5 * h__ + senderSessionID.GetHashCode();
            }
            if (fromID != null)
            {
                h__ = 5 * h__ + fromID.GetHashCode();
            }
            if (fromRole != null)
            {
                h__ = 5 * h__ + fromRole.GetHashCode();
            }
            if (toID != null)
            {
                h__ = 5 * h__ + toID.GetHashCode();
            }
            if (toRole != null)
            {
                h__ = 5 * h__ + toRole.GetHashCode();
            }
            if (replyToID != null)
            {
                h__ = 5 * h__ + replyToID.GetHashCode();
            }
            if (messageType != null)
            {
                h__ = 5 * h__ + messageType.GetHashCode();
            }
            if (messageControl != null)
            {
                h__ = 5 * h__ + messageControl.GetHashCode();
            }
            if (messageContent != null)
            {
                h__ = 5 * h__ + messageContent.GetHashCode();
            }
            if (sessionId != null)
            {
                h__ = 5 * h__ + sessionId.GetHashCode();
            }
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public override bool Equals(object other__)
        {
            if (object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if (other__ == null)
            {
                return false;
            }
            if (GetType() != other__.GetType())
            {
                return false;
            }
            Message o__ = (Message)other__;
            if (messageID == null)
            {
                if (o__.messageID != null)
                {
                    return false;
                }
            }
            else
            {
                if (!messageID.Equals(o__.messageID))
                {
                    return false;
                }
            }
            if (routerAddress == null)
            {
                if (o__.routerAddress != null)
                {
                    return false;
                }
            }
            else
            {
                if (!routerAddress.Equals(o__.routerAddress))
                {
                    return false;
                }
            }
            if (receiptAddress == null)
            {
                if (o__.receiptAddress != null)
                {
                    return false;
                }
            }
            else
            {
                if (!receiptAddress.Equals(o__.receiptAddress))
                {
                    return false;
                }
            }
            if (receiptSessionID == null)
            {
                if (o__.receiptSessionID != null)
                {
                    return false;
                }
            }
            else
            {
                if (!receiptSessionID.Equals(o__.receiptSessionID))
                {
                    return false;
                }
            }
            if (senderSessionID == null)
            {
                if (o__.senderSessionID != null)
                {
                    return false;
                }
            }
            else
            {
                if (!senderSessionID.Equals(o__.senderSessionID))
                {
                    return false;
                }
            }
            if (fromID == null)
            {
                if (o__.fromID != null)
                {
                    return false;
                }
            }
            else
            {
                if (!fromID.Equals(o__.fromID))
                {
                    return false;
                }
            }
            if (fromRole == null)
            {
                if (o__.fromRole != null)
                {
                    return false;
                }
            }
            else
            {
                if (!fromRole.Equals(o__.fromRole))
                {
                    return false;
                }
            }
            if (toID == null)
            {
                if (o__.toID != null)
                {
                    return false;
                }
            }
            else
            {
                if (!toID.Equals(o__.toID))
                {
                    return false;
                }
            }
            if (toRole == null)
            {
                if (o__.toRole != null)
                {
                    return false;
                }
            }
            else
            {
                if (!toRole.Equals(o__.toRole))
                {
                    return false;
                }
            }
            if (replyToID == null)
            {
                if (o__.replyToID != null)
                {
                    return false;
                }
            }
            else
            {
                if (!replyToID.Equals(o__.replyToID))
                {
                    return false;
                }
            }
            if (messageType == null)
            {
                if (o__.messageType != null)
                {
                    return false;
                }
            }
            else
            {
                if (!messageType.Equals(o__.messageType))
                {
                    return false;
                }
            }
            if (messageControl == null)
            {
                if (o__.messageControl != null)
                {
                    return false;
                }
            }
            else
            {
                if (!messageControl.Equals(o__.messageControl))
                {
                    return false;
                }
            }
            if (messageContent == null)
            {
                if (o__.messageContent != null)
                {
                    return false;
                }
            }
            else
            {
                if (!messageContent.Equals(o__.messageContent))
                {
                    return false;
                }
            }
            if (sessionId == null)
            {
                if (o__.sessionId != null)
                {
                    return false;
                }
            }
            else
            {
                if (!sessionId.Equals(o__.sessionId))
                {
                    return false;
                }
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public static bool operator ==(Message lhs__, Message rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public static bool operator !=(Message lhs__, Message rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeString(messageID);
            os__.writeString(routerAddress);
            os__.writeString(receiptAddress);
            os__.writeString(receiptSessionID);
            os__.writeString(senderSessionID);
            os__.writeString(fromID);
            os__.writeString(fromRole);
            os__.writeString(toID);
            os__.writeString(toRole);
            os__.writeString(replyToID);
            os__.writeString(messageType);
            os__.writeString(messageControl);
            os__.writeString(messageContent);
            os__.writeString(sessionId);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
        public void read__(IceInternal.BasicStream is__)
        {
            messageID = is__.readString();
            routerAddress = is__.readString();
            receiptAddress = is__.readString();
            receiptSessionID = is__.readString();
            senderSessionID = is__.readString();
            fromID = is__.readString();
            fromRole = is__.readString();
            toID = is__.readString();
            toRole = is__.readString();
            replyToID = is__.readString();
            messageType = is__.readString();
            messageControl = is__.readString();
            messageContent = is__.readString();
            sessionId = is__.readString();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface MessageEndpoint : Ice.Object, MessageEndpointOperations_, MessageEndpointOperationsNC_, Glacier2.Session
    {
    }
}

namespace slice
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public delegate void Callback_MessageEndpoint_setCallback(bool ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public delegate void Callback_MessageEndpoint_sendMessage(slice.Reply ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public delegate void Callback_MessageEndpoint_sendMessageNew(slice.Reply ret__);
}

namespace slice
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public interface MessageEndpointPrx : Glacier2.SessionPrx
    {
        bool setCallback(slice.MessageEndpointPrx callbackProxy, string id);
        bool setCallback(slice.MessageEndpointPrx callbackProxy, string id, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<slice.Callback_MessageEndpoint_setCallback> begin_setCallback(slice.MessageEndpointPrx callbackProxy, string id);
        Ice.AsyncResult<slice.Callback_MessageEndpoint_setCallback> begin_setCallback(slice.MessageEndpointPrx callbackProxy, string id, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_setCallback(slice.MessageEndpointPrx callbackProxy, string id, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_setCallback(slice.MessageEndpointPrx callbackProxy, string id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        bool end_setCallback(Ice.AsyncResult r__);

        slice.Reply sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback);
        slice.Reply sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<slice.Callback_MessageEndpoint_sendMessage> begin_sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback);
        Ice.AsyncResult<slice.Callback_MessageEndpoint_sendMessage> begin_sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        slice.Reply end_sendMessage(Ice.AsyncResult r__);

        slice.Reply sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent);
        slice.Reply sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<slice.Callback_MessageEndpoint_sendMessageNew> begin_sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent);
        Ice.AsyncResult<slice.Callback_MessageEndpoint_sendMessageNew> begin_sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        slice.Reply end_sendMessageNew(Ice.AsyncResult r__);
    }
}

namespace slice
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public interface MessageEndpointOperations_ : Glacier2.SessionOperations_
    {
        /// <summary>
        /// 设置回调代理,依据ID值将回调代理保持起来,需要进行回调的时候取出回调代理回调数据
        /// </summary>
        /// <param name="current__">The Current object for the invocation.</param>

        bool setCallback(slice.MessageEndpointPrx callbackProxy, string id, Ice.Current current__);

        /// <summary>
        /// 数据发送，需要进行分批处理
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void sendMessage_async(slice.AMD_MessageEndpoint_sendMessage cb__, string hash, int index, int fragmentSize, string message, bool isCallback, Ice.Current current__);

        /// <summary>
        /// lzj
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="current__">The Current object for the invocation.</param>
        void sendMessageNew_async(slice.AMD_MessageEndpoint_sendMessageNew cb__, string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public interface MessageEndpointOperationsNC_ : Glacier2.SessionOperationsNC_
    {
        /// <summary>
        /// 设置回调代理,依据ID值将回调代理保持起来,需要进行回调的时候取出回调代理回调数据
        /// </summary>

        bool setCallback(slice.MessageEndpointPrx callbackProxy, string id);

        /// <summary>
        /// 数据发送，需要进行分批处理
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void sendMessage_async(slice.AMD_MessageEndpoint_sendMessage cb__, string hash, int index, int fragmentSize, string message, bool isCallback);

        /// <summary>
        /// lzj
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        void sendMessageNew_async(slice.AMD_MessageEndpoint_sendMessageNew cb__, string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent);
    }
}

namespace slice
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public sealed class MessageEndpointPrxHelper : Ice.ObjectPrxHelperBase, MessageEndpointPrx
    {
        #region Synchronous operations

        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the
        /// Router is destroyed.
        /// </summary>

        public void destroy()
        {
            destroy(null, false);
        }

        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the
        /// Router is destroyed.
        /// </summary>
        /// <param name="context__">The Context map to send with the invocation.</param>

        public void destroy(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            destroy(context__, true);
        }

        private void destroy(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if (explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while (true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    MessageEndpointDel_ del__ = (MessageEndpointDel_)delBase__;
                    del__.destroy(context__);
                    return;
                }
                catch (IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch (Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// 数据发送，需要进行分批处理
        /// </summary>

        public slice.Reply sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback)
        {
            return sendMessage(hash, index, fragmentSize, message, isCallback, null, false);
        }

        /// <summary>
        /// 数据发送，需要进行分批处理
        /// </summary>
        /// <param name="context__">The Context map to send with the invocation.</param>

        public slice.Reply sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return sendMessage(hash, index, fragmentSize, message, isCallback, context__, true);
        }

        private slice.Reply sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if (explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while (true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("sendMessage");
                    delBase__ = getDelegate__(false);
                    MessageEndpointDel_ del__ = (MessageEndpointDel_)delBase__;
                    return del__.sendMessage(hash, index, fragmentSize, message, isCallback, context__);
                }
                catch (IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch (Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// lzj
        /// </summary>

        public slice.Reply sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent)
        {
            return sendMessageNew(hash, isCallback, msg, index, fragmentSize, messagecontent, null, false);
        }

        /// <summary>
        /// lzj
        /// </summary>
        /// <param name="context__">The Context map to send with the invocation.</param>

        public slice.Reply sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return sendMessageNew(hash, isCallback, msg, index, fragmentSize, messagecontent, context__, true);
        }

        private slice.Reply sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if (explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while (true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("sendMessageNew");
                    delBase__ = getDelegate__(false);
                    MessageEndpointDel_ del__ = (MessageEndpointDel_)delBase__;
                    return del__.sendMessageNew(hash, isCallback, msg, index, fragmentSize, messagecontent, context__);
                }
                catch (IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch (Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        /// <summary>
        /// 设置回调代理,依据ID值将回调代理保持起来,需要进行回调的时候取出回调代理回调数据
        /// </summary>

        public bool setCallback(slice.MessageEndpointPrx callbackProxy, string id)
        {
            return setCallback(callbackProxy, id, null, false);
        }

        /// <summary>
        /// 设置回调代理,依据ID值将回调代理保持起来,需要进行回调的时候取出回调代理回调数据
        /// </summary>
        /// <param name="context__">The Context map to send with the invocation.</param>

        public bool setCallback(slice.MessageEndpointPrx callbackProxy, string id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return setCallback(callbackProxy, id, context__, true);
        }

        private bool setCallback(slice.MessageEndpointPrx callbackProxy, string id, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if (explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while (true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("setCallback");
                    delBase__ = getDelegate__(false);
                    MessageEndpointDel_ del__ = (MessageEndpointDel_)delBase__;
                    return del__.setCallback(callbackProxy, id, context__);
                }
                catch (IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapper__(delBase__, ex__);
                }
                catch (Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Glacier2.Callback_Session_destroy> begin_destroy()
        {
            return begin_destroy(null, false, null, null);
        }

        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<Glacier2.Callback_Session_destroy> begin_destroy(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_destroy(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_destroy(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_destroy(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_destroy(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_destroy(ctx__, true, cb__, cookie__);
        }

        private const string __destroy_name = "destroy";

        public void end_destroy(Ice.AsyncResult r__)
        {
            end__(r__, __destroy_name);
        }

        private Ice.AsyncResult<Glacier2.Callback_Session_destroy> begin_destroy(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Glacier2.Callback_Session_destroy> result__ = new IceInternal.OnewayOutgoingAsync<Glacier2.Callback_Session_destroy>(this, __destroy_name, destroy_completed__, cookie__);
            if (cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__destroy_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch (Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void destroy_completed__(Glacier2.Callback_Session_destroy cb__)
        {
            if (cb__ != null)
            {
                cb__();
            }
        }

        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        public bool destroy_async(Glacier2.AMI_Session_destroy cb__)
        {
            Ice.AsyncResult<Glacier2.Callback_Session_destroy> result__ = begin_destroy();
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if (cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        /// <summary>
        /// Destroy the session.
        /// This is called automatically when the
        /// </summary>
        /// <param name="cb__">The callback object for the operation.</param>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public bool destroy_async(Glacier2.AMI_Session_destroy cb__, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            Ice.AsyncResult<Glacier2.Callback_Session_destroy> result__ = begin_destroy(ctx__);
            result__.whenCompleted(cb__.response__, cb__.exception__);
            if (cb__ is Ice.AMISentCallback)
            {
                result__.whenSent((Ice.AsyncCallback)cb__.sent__);
            }
            return result__.sentSynchronously();
        }

        public Ice.AsyncResult<slice.Callback_MessageEndpoint_sendMessage> begin_sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback)
        {
            return begin_sendMessage(hash, index, fragmentSize, message, isCallback, null, false, null, null);
        }

        /// <summary>
        /// 数据发送，需要进行分批处理
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<slice.Callback_MessageEndpoint_sendMessage> begin_sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_sendMessage(hash, index, fragmentSize, message, isCallback, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendMessage(hash, index, fragmentSize, message, isCallback, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendMessage(hash, index, fragmentSize, message, isCallback, ctx__, true, cb__, cookie__);
        }

        private const string __sendMessage_name = "sendMessage";

        public slice.Reply end_sendMessage(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __sendMessage_name);
            if (!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch (Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            slice.Reply ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = null;
            if (ret__ == null)
            {
                ret__ = new slice.Reply();
            }
            ret__.read__(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<slice.Callback_MessageEndpoint_sendMessage> begin_sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__sendMessage_name);
            IceInternal.TwowayOutgoingAsync<slice.Callback_MessageEndpoint_sendMessage> result__ = new IceInternal.TwowayOutgoingAsync<slice.Callback_MessageEndpoint_sendMessage>(this, __sendMessage_name, sendMessage_completed__, cookie__);
            if (cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__sendMessage_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(hash);
                os__.writeInt(index);
                os__.writeInt(fragmentSize);
                os__.writeString(message);
                os__.writeBool(isCallback);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch (Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void sendMessage_completed__(Ice.AsyncResult r__, slice.Callback_MessageEndpoint_sendMessage cb__, Ice.ExceptionCallback excb__)
        {
            slice.Reply ret__;
            try
            {
                ret__ = end_sendMessage(r__);
            }
            catch (Ice.Exception ex__)
            {
                if (excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if (cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<slice.Callback_MessageEndpoint_sendMessageNew> begin_sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent)
        {
            return begin_sendMessageNew(hash, isCallback, msg, index, fragmentSize, messagecontent, null, false, null, null);
        }

        /// <summary>
        /// lzj
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<slice.Callback_MessageEndpoint_sendMessageNew> begin_sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_sendMessageNew(hash, isCallback, msg, index, fragmentSize, messagecontent, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendMessageNew(hash, isCallback, msg, index, fragmentSize, messagecontent, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendMessageNew(hash, isCallback, msg, index, fragmentSize, messagecontent, ctx__, true, cb__, cookie__);
        }

        private const string __sendMessageNew_name = "sendMessageNew";

        public slice.Reply end_sendMessageNew(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __sendMessageNew_name);
            if (!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch (Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            slice.Reply ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = null;
            if (ret__ == null)
            {
                ret__ = new slice.Reply();
            }
            ret__.read__(is__);
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<slice.Callback_MessageEndpoint_sendMessageNew> begin_sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__sendMessageNew_name);
            IceInternal.TwowayOutgoingAsync<slice.Callback_MessageEndpoint_sendMessageNew> result__ = new IceInternal.TwowayOutgoingAsync<slice.Callback_MessageEndpoint_sendMessageNew>(this, __sendMessageNew_name, sendMessageNew_completed__, cookie__);
            if (cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__sendMessageNew_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeString(hash);
                os__.writeBool(isCallback);
                if (msg == null)
                {
                    slice.Message tmp__ = new slice.Message();
                    tmp__.write__(os__);
                }
                else
                {
                    msg.write__(os__);
                }
                os__.writeInt(index);
                os__.writeInt(fragmentSize);
                os__.writeString(messagecontent);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch (Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void sendMessageNew_completed__(Ice.AsyncResult r__, slice.Callback_MessageEndpoint_sendMessageNew cb__, Ice.ExceptionCallback excb__)
        {
            slice.Reply ret__;
            try
            {
                ret__ = end_sendMessageNew(r__);
            }
            catch (Ice.Exception ex__)
            {
                if (excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if (cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<slice.Callback_MessageEndpoint_setCallback> begin_setCallback(slice.MessageEndpointPrx callbackProxy, string id)
        {
            return begin_setCallback(callbackProxy, id, null, false, null, null);
        }

        /// <summary>
        /// 设置回调代理,依据ID值将回调代理保持起来,需要进行回调的时候取出回调代理回调数据
        /// </summary>
        /// <param name="ctx__">The Context map to send with the invocation.</param>
        public Ice.AsyncResult<slice.Callback_MessageEndpoint_setCallback> begin_setCallback(slice.MessageEndpointPrx callbackProxy, string id, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_setCallback(callbackProxy, id, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_setCallback(slice.MessageEndpointPrx callbackProxy, string id, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setCallback(callbackProxy, id, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_setCallback(slice.MessageEndpointPrx callbackProxy, string id, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_setCallback(callbackProxy, id, ctx__, true, cb__, cookie__);
        }

        private const string __setCallback_name = "setCallback";

        public bool end_setCallback(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __setCallback_name);
            if (!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch (Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            bool ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readBool();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<slice.Callback_MessageEndpoint_setCallback> begin_setCallback(slice.MessageEndpointPrx callbackProxy, string id, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__setCallback_name);
            IceInternal.TwowayOutgoingAsync<slice.Callback_MessageEndpoint_setCallback> result__ = new IceInternal.TwowayOutgoingAsync<slice.Callback_MessageEndpoint_setCallback>(this, __setCallback_name, setCallback_completed__, cookie__);
            if (cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__setCallback_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                slice.MessageEndpointPrxHelper.write__(os__, callbackProxy);
                os__.writeString(id);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch (Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void setCallback_completed__(Ice.AsyncResult r__, slice.Callback_MessageEndpoint_setCallback cb__, Ice.ExceptionCallback excb__)
        {
            bool ret__;
            try
            {
                ret__ = end_setCallback(r__);
            }
            catch (Ice.Exception ex__)
            {
                if (excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if (cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static MessageEndpointPrx checkedCast(Ice.ObjectPrx b)
        {
            if (b == null)
            {
                return null;
            }
            MessageEndpointPrx r = b as MessageEndpointPrx;
            if ((r == null) && b.ice_isA("::slice::MessageEndpoint"))
            {
                MessageEndpointPrxHelper h = new MessageEndpointPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MessageEndpointPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if (b == null)
            {
                return null;
            }
            MessageEndpointPrx r = b as MessageEndpointPrx;
            if ((r == null) && b.ice_isA("::slice::MessageEndpoint", ctx))
            {
                MessageEndpointPrxHelper h = new MessageEndpointPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MessageEndpointPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if (b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if (bb.ice_isA("::slice::MessageEndpoint"))
                {
                    MessageEndpointPrxHelper h = new MessageEndpointPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MessageEndpointPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if (b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if (bb.ice_isA("::slice::MessageEndpoint", ctx))
                {
                    MessageEndpointPrxHelper h = new MessageEndpointPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch (Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static MessageEndpointPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if (b == null)
            {
                return null;
            }
            MessageEndpointPrx r = b as MessageEndpointPrx;
            if (r == null)
            {
                MessageEndpointPrxHelper h = new MessageEndpointPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static MessageEndpointPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if (b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            MessageEndpointPrxHelper h = new MessageEndpointPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new MessageEndpointDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new MessageEndpointDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, MessageEndpointPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static MessageEndpointPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if (proxy != null)
            {
                MessageEndpointPrxHelper result = new MessageEndpointPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace slice
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public interface MessageEndpointDel_ : Glacier2.SessionDel_
    {
        bool setCallback(slice.MessageEndpointPrx callbackProxy, string id, _System.Collections.Generic.Dictionary<string, string> context__);

        slice.Reply sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, _System.Collections.Generic.Dictionary<string, string> context__);

        slice.Reply sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, _System.Collections.Generic.Dictionary<string, string> context__);
    }
}

namespace slice
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public sealed class MessageEndpointDelM_ : Ice.ObjectDelM_, MessageEndpointDel_
    {
        public void destroy(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("destroy", Ice.OperationMode.Normal, context__);
            try
            {
                bool ok__ = og__.invoke();
                if (!og__.istr().isEmpty())
                {
                    try
                    {
                        if (!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch (Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch (Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public slice.Reply sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("sendMessage", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(hash);
                    os__.writeInt(index);
                    os__.writeInt(fragmentSize);
                    os__.writeString(message);
                    os__.writeBool(isCallback);
                }
                catch (Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if (!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch (Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    slice.Reply ret__;
                    ret__ = null;
                    if (ret__ == null)
                    {
                        ret__ = new slice.Reply();
                    }
                    ret__.read__(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch (Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public slice.Reply sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("sendMessageNew", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeString(hash);
                    os__.writeBool(isCallback);
                    if (msg == null)
                    {
                        slice.Message tmp__ = new slice.Message();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        msg.write__(os__);
                    }
                    os__.writeInt(index);
                    os__.writeInt(fragmentSize);
                    os__.writeString(messagecontent);
                }
                catch (Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if (!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch (Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    slice.Reply ret__;
                    ret__ = null;
                    if (ret__ == null)
                    {
                        ret__ = new slice.Reply();
                    }
                    ret__.read__(is__);
                    is__.endReadEncaps();
                    return ret__;
                }
                catch (Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public bool setCallback(slice.MessageEndpointPrx callbackProxy, string id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("setCallback", Ice.OperationMode.Normal, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    slice.MessageEndpointPrxHelper.write__(os__, callbackProxy);
                    os__.writeString(id);
                }
                catch (Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if (!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch (Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    bool ret__;
                    ret__ = is__.readBool();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch (Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace slice
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public sealed class MessageEndpointDelD_ : Ice.ObjectDelD_, MessageEndpointDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void destroy(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "destroy", Ice.OperationMode.Normal, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                MessageEndpoint servant__ = null;
                try
                {
                    servant__ = (MessageEndpoint)obj__;
                }
                catch (_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.destroy(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch (Ice.SystemException)
            {
                throw;
            }
            catch (System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public slice.Reply sendMessage(string hash, int index, int fragmentSize, string message, bool isCallback, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public slice.Reply sendMessageNew(string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            throw new Ice.CollocationOptimizationException();
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public bool setCallback(slice.MessageEndpointPrx callbackProxy, string id, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "setCallback", Ice.OperationMode.Normal, context__);
            bool result__ = false;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                MessageEndpoint servant__ = null;
                try
                {
                    servant__ = (MessageEndpoint)obj__;
                }
                catch (_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.setCallback(callbackProxy, id, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch (Ice.SystemException)
            {
                throw;
            }
            catch (System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }
    }
}

namespace slice
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public abstract class MessageEndpointDisp_ : Ice.ObjectImpl, MessageEndpoint
    {
        #region Slice operations

        public bool setCallback(slice.MessageEndpointPrx callbackProxy, string id)
        {
            return setCallback(callbackProxy, id, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract bool setCallback(slice.MessageEndpointPrx callbackProxy, string id, Ice.Current current__);

        public void sendMessage_async(slice.AMD_MessageEndpoint_sendMessage cb__, string hash, int index, int fragmentSize, string message, bool isCallback)
        {
            sendMessage_async(cb__, hash, index, fragmentSize, message, isCallback, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void sendMessage_async(slice.AMD_MessageEndpoint_sendMessage cb__, string hash, int index, int fragmentSize, string message, bool isCallback, Ice.Current current__);

        public void sendMessageNew_async(slice.AMD_MessageEndpoint_sendMessageNew cb__, string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent)
        {
            sendMessageNew_async(cb__, hash, isCallback, msg, index, fragmentSize, messagecontent, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void sendMessageNew_async(slice.AMD_MessageEndpoint_sendMessageNew cb__, string hash, bool isCallback, slice.Message msg, int index, int fragmentSize, string messagecontent, Ice.Current current__);

        #endregion

        #region Inherited Slice operations

        public void destroy()
        {
            destroy(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void destroy(Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Glacier2::Session",
            "::Ice::Object",
            "::slice::MessageEndpoint"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[2];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[2];
        }

        public static new string ice_staticId()
        {
            return ids__[2];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus setCallback___(MessageEndpoint obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            slice.MessageEndpointPrx callbackProxy;
            callbackProxy = slice.MessageEndpointPrxHelper.read__(is__);
            string id;
            id = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            bool ret__ = obj__.setCallback(callbackProxy, id, current__);
            os__.writeBool(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus sendMessage___(MessageEndpoint obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string hash;
            hash = is__.readString();
            int index;
            index = is__.readInt();
            int fragmentSize;
            fragmentSize = is__.readInt();
            string message;
            message = is__.readString();
            bool isCallback;
            isCallback = is__.readBool();
            is__.endReadEncaps();
            AMD_MessageEndpoint_sendMessage cb__ = new _AMD_MessageEndpoint_sendMessage(inS__);
            try
            {
                obj__.sendMessage_async(cb__, hash, index, fragmentSize, message, isCallback, current__);
            }
            catch (_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus sendMessageNew___(MessageEndpoint obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            string hash;
            hash = is__.readString();
            bool isCallback;
            isCallback = is__.readBool();
            slice.Message msg;
            msg = null;
            if (msg == null)
            {
                msg = new slice.Message();
            }
            msg.read__(is__);
            int index;
            index = is__.readInt();
            int fragmentSize;
            fragmentSize = is__.readInt();
            string messagecontent;
            messagecontent = is__.readString();
            is__.endReadEncaps();
            AMD_MessageEndpoint_sendMessageNew cb__ = new _AMD_MessageEndpoint_sendMessageNew(inS__);
            try
            {
                obj__.sendMessageNew_async(cb__, hash, isCallback, msg, index, fragmentSize, messagecontent, current__);
            }
            catch (_System.Exception ex__)
            {
                cb__.ice_exception(ex__);
            }
            return Ice.DispatchStatus.DispatchAsync;
        }

        private static string[] all__ =
        {
            "destroy",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "sendMessage",
            "sendMessageNew",
            "setCallback"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if (pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch (pos)
            {
                case 0:
                    {
                        return Glacier2.SessionDisp_.destroy___(this, inS__, current__);
                    }
                case 1:
                    {
                        return ice_id___(this, inS__, current__);
                    }
                case 2:
                    {
                        return ice_ids___(this, inS__, current__);
                    }
                case 3:
                    {
                        return ice_isA___(this, inS__, current__);
                    }
                case 4:
                    {
                        return ice_ping___(this, inS__, current__);
                    }
                case 5:
                    {
                        return sendMessage___(this, inS__, current__);
                    }
                case 6:
                    {
                        return sendMessageNew___(this, inS__, current__);
                    }
                case 7:
                    {
                        return setCallback___(this, inS__, current__);
                    }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if (rid__)
            {
                /* string myId = */
                is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type slice::MessageEndpoint was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type slice::MessageEndpoint was not generated with stream support";
            throw ex;
        }

        #endregion
    }
}

namespace slice
{
    /// <summary>
    /// 数据发送，需要进行分批处理
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public interface AMD_MessageEndpoint_sendMessage : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response(slice.Reply ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    class _AMD_MessageEndpoint_sendMessage : IceInternal.IncomingAsync, AMD_MessageEndpoint_sendMessage
    {
        public _AMD_MessageEndpoint_sendMessage(IceInternal.Incoming inc)
            : base(inc)
        {
        }

        public void ice_response(slice.Reply ret__)
        {
            if (validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    if (ret__ == null)
                    {
                        slice.Reply tmp__ = new slice.Reply();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        ret__.write__(os__);
                    }
                }
                catch (Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }

    /// <summary>
    /// lzj
    /// </summary>
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    public interface AMD_MessageEndpoint_sendMessageNew : Ice.AMDCallback
    {
        /// <summary>
        /// ice_response indicates that
        /// the operation completed successfully.
        /// </summary>
        void ice_response(slice.Reply ret__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.1")]
    class _AMD_MessageEndpoint_sendMessageNew : IceInternal.IncomingAsync, AMD_MessageEndpoint_sendMessageNew
    {
        public _AMD_MessageEndpoint_sendMessageNew(IceInternal.Incoming inc)
            : base(inc)
        {
        }

        public void ice_response(slice.Reply ret__)
        {
            if (validateResponse__(true))
            {
                try
                {
                    IceInternal.BasicStream os__ = this.os__();
                    if (ret__ == null)
                    {
                        slice.Reply tmp__ = new slice.Reply();
                        tmp__.write__(os__);
                    }
                    else
                    {
                        ret__.write__(os__);
                    }
                }
                catch (Ice.LocalException ex__)
                {
                    ice_exception(ex__);
                }
                response__(true);
            }
        }
    }
}
