//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.CoreLibrary
{
    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.IO;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Text;
    using Victop.Frame.CoreLibrary.AbsClasses;
    using Victop.Frame.CoreLibrary.Enums;
    using Victop.Frame.CoreLibrary.Interfaces;
    using Victop.Frame.CoreLibrary.Models;
    using Victop.Frame.PublicLib.Helpers;
    using Victop.Frame.PublicLib.Managers;

    /// <summary>
    /// 框架初始化
    /// </summary>
    /// <remarks>框架初始化</remarks>
    public class FrameInit
    {
        /// <summary>
        /// 框架初始化实例
        /// </summary>
        private static FrameInit frameInitstance;
        private IComlink comlinkObject;
        private IFeiDaoDataOperation feiDaoDataObject = FeiDaoDBFactory.CreateDefaultFeiDaoDB();
        /// <summary>
        /// 通信实例对象
        /// </summary>
        public IComlink ComlinkObject
        {
            get { return comlinkObject; }
        }

        public IFeiDaoDataOperation FeiDaoDataObject
        {
            get
            {
                return feiDaoDataObject;
            }
        }
        private Base baseObject;
        /// <summary>
        /// 基类实例对象
        /// </summary>
        public Base BaseObject
        {
            get { return baseObject; }
        }
        private string appName;
        /// <summary>
        /// 运行模式(离线/在线)
        /// </summary>
        private int runMode;
        /// <summary>
        /// 运行模式(离线/在线)
        /// </summary>
        public int RunMode
        {
            get { return runMode; }
        }
        private int autoSearch;
        /// <summary>
        /// 自动寻址标识
        /// </summary>
        public int AutoSearch
        {
            get { return autoSearch; }
        }
        /// <summary>
        /// 框架初始化构造函数
        /// </summary>
        public FrameInit()
        {
            GetConfigInfo();
        }
        /// <summary>
        /// 获取框架实例化实例
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.Synchronized)]
        public static FrameInit GetInstance()
        {
            if (frameInitstance == null)
            {
                frameInitstance = new FrameInit();
            }
            return frameInitstance;
        }

        /// <summary>
        /// 框架运行
        /// </summary>
        public bool FrameRun()
        {
            BuildInServerInit();
            CloudGalleryInit();
            FeiDaoDataObject.DataBaseInit();
            return MessageComLinkOpen();
        }
        /// <summary>
        /// 卸载
        /// </summary>
        public void FrameUnload()
        {
            ComlinkObject.Stop();
        }
        /// <summary>
        /// 重置
        /// </summary>
        public void FrameReset()
        {
            ComlinkObject.Reset();
        }
        /// <summary>
        /// 消息通信连接初始化,完成适配器及通信器的开启
        /// </summary>
        private bool MessageComLinkOpen()
        {
            if (baseObject == null)
            {
                baseObject = AdapterFactory.AdapterBase;
            }
            if (ComlinkObject.GetStatus() > 0)
            {
                //通信器已经启动
                return true;
            }
            else
            {
                ComlinkObject.Init(baseObject);
                if (ComlinkObject.GetStatus() > 0)
                {
                    return true;
                }
            }
            return false;

        }

        /// <summary>
        /// 通道信息初始化
        /// </summary>
        private void CloudGalleryInit()
        {
            GalleryManager galleryManager = new GalleryManager();
            galleryManager.InitGalleryList();
        }

        /// <summary>
        /// 内置服务初始化
        /// </summary>
        private void BuildInServerInit()
        {
            RegisterServerManager registerServerManager = new RegisterServerManager();
            registerServerManager.InitServerList();
        }
        /// <summary>
        /// 获取配置信息
        /// </summary>
        private void GetConfigInfo()
        {
            try
            {
                string filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, ConfigurationManager.AppSettings.Get("clientmsg") + ".json");
                CoreDataCollection.ClientMessageTypeList = JsonHelper.ToObject<MessageTypeModel>(FileHelper.ReadText(filePath));
            }
            catch (Exception ex)
            {
                LoggerHelper.ErrorFormat("初始化客户端消息类型异常:{0}", ex.Message);
            }
            appName = ConfigManager.GetAttributeOfNodeByName("System", "AppName");
            runMode = Convert.ToInt32(ConfigManager.GetAttributeOfNodeByName("System", "Mode"));
            comlinkObject = ComlinkFactory.CreateDefaultComlink();
            //开启自动寻找局域网内SOA
            autoSearch = Convert.ToInt32(ConfigManager.GetAttributeOfNodeByName("System", "AutoSearch"));
            if (autoSearch > 0)
            {
                StartAutoDiscover();
            }
        }
        /// <summary>
        /// 自动寻找局域网内SOA
        /// </summary>
        private static void StartAutoDiscover()
        {
            int broadCastTime = Convert.ToInt32(ConfigManager.GetAttributeOfNodeByName("System", "BroadCastTime"));
            int startPort = Convert.ToInt32(ConfigManager.GetAttributeOfNodeByName("System", "StartPoint"));
            int endPort = Convert.ToInt32(ConfigManager.GetAttributeOfNodeByName("System", "EndPoint"));
            AutoDiscover.GetInstance().BroadCastTime = broadCastTime;
            AutoDiscover.GetInstance().StartPoint = startPort;
            AutoDiscover.GetInstance().EndPoint = endPort;
            AutoDiscover.GetInstance().StartDiscover();
        }
    }
}

