//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.CoreLibrary.AbsClasses
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Victop.Frame.CoreLibrary.Enums;
    using Victop.Frame.CoreLibrary.Interfaces;
    using Victop.Frame.CoreLibrary.Models;
    using Victop.Frame.PublicLib.Managers;

	/// <summary>
	/// 主框架基类
	/// </summary>
	/// <remarks>框架基类</remarks>
	public abstract class Base
	{
        private Dictionary<string, IPInfo> wormhole = new Dictionary<string, IPInfo>();
        /// <summary>
        /// 用于记录端点的连接地址和端口
        /// </summary>
        public Dictionary<string, IPInfo> Wormhole
        {
            get { return wormhole; }
        }
        /// <summary>
        /// 应用程序名称
        /// </summary>
        private string appName = ConfigManager.GetAttributeOfNodeByName("System", "AppName");
        public string AppName
        {
            get { return appName; }
            set { appName = value; }
        }
        /// <summary>
        /// 本地IP地址
        /// </summary>
        private string localIP = null;
        public string LocalIP
        {
            get { return localIP; }
            set { localIP = value; }
        }
        /// <summary>
        /// 本地端口
        /// </summary>
        private string localPort = null;
        public string LocalPort
        {
            get { return localPort; }
            set { localPort = value; }
        }
        /// <summary>
        /// 发送失败时重试次数
        /// </summary>
        private int resendTimes = 0;
        /// <summary>
        /// 发送失败时重试次数
        /// </summary>
        public int ResendTimes
        {
            get { return resendTimes; }
            set { resendTimes = value; }
        }
		/// <summary>
		/// 主框架初始化时触发事件执行该方法
		/// </summary>
		public abstract bool Init();

		/// <summary>
		/// 主框架初始化完成之后触发事件执行该方法，该方法的执行使用另一个线程运行，不会阻塞主框架线程
		/// </summary>
		public abstract void AutoRun();
        // <summary>
        /// 同步消息处理事件，主框架收到来自其他端点的消息，经过签收的消息就会优先触发事件执行该方法
        /// </summary>
        /// <param name="response">该参数封装的通讯模块的应答消息内容ReplyMessage，通过方法 response.reply(replyControl, replyContent, replyModeEnum) 设置应答的内容，并在执行该方法的同时，将应答传递给消息发送者</param>
        /// <param name="message">收到的消息</param>
        public abstract void SynchDoMessage(IResponse response, RequestMessage message);

        /// <summary>
        /// 异步消息处理事件，触发条件由事件方法 synchDoMessage 中的 Response 参数设置的应答内容 replyModeEnum
        /// 决定，当 replyModeEnum 设置为 ASYNC（异步）的时候，消息主体 Message 在执行完 synchDoMessage
        /// 的逻辑之后转入该事件方法
        /// </summary>
        /// <param name="message">收到的消息</param>
        public abstract void AsyncDoMessage(RequestMessage message);

        /// <summary>
        ///  拒收消息处理事件，主框架收到来自其他端点的消息，消息的消息类型不在设定的签收范围内的消息就会触发事件执行该方法
        /// </summary>
        /// <param name="response">
        /// 该参数封装的通讯模块的应答消息内容ReplyMessage，通过方法
        /// response.reply(replyControl, replyContent, replyModeEnum)
        /// 设置应答的内容，并在执行该方法的同时，将应答传递给消息发送者
        /// </param>
        /// <param name="message">收到的消息</param>
        public abstract void RejectedMessage(IResponse response, RequestMessage message);
		/// <summary>
		/// 主框架退出或者停止运行时触发事件执行该方法
		/// </summary>
		public abstract void OnExit(ExitTypeEnum exitType);

	}
}

