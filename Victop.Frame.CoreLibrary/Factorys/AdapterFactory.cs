//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.CoreLibrary
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Reflection;
    using System.Runtime.CompilerServices;
    using System.Text;
    using Victop.Frame.CoreLibrary.AbsClasses;
    using Victop.Frame.CoreLibrary.Interfaces;

	/// <summary>
	/// 适配器工厂
	/// </summary>
	/// <remarks>适配器工厂</remarks>
	public class AdapterFactory
	{
        /// <summary>
        /// 适配器实例
        /// </summary>
        private static IAdapter adpaterInstance;
		/// <summary>
		/// 适配器实例
		/// </summary>
		public virtual IAdapter AdapterInstance
		{
            get { return FindAdapter(); }
		}

		public static Base AdapterBase
		{
            get { return FindBase(); }
		}
        [MethodImpl(MethodImplOptions.Synchronized)]
        private static IAdapter FindAdapter()
        {
            try
            {
                if (adpaterInstance == null)
                {
                    Assembly endpointAssembly = null;
                    switch (FrameInit.GetInstance().RunMode)
                    {
                        case 0://离线
                            endpointAssembly = Assembly.Load("Victop.Frame.StandaloneAdapter");
                            adpaterInstance = (IAdapter)endpointAssembly.CreateInstance("Victop.Frame.StandaloneAdapter.MessageManager");
                            break;
                        case 1://在线
                            endpointAssembly = Assembly.Load("Victop.Frame.Adapter");
                            adpaterInstance = (IAdapter)endpointAssembly.CreateInstance("Victop.Frame.Adapter.MessageManager");
                            break;
                        default:
                            break;
                    }
                }
            }
            catch (Exception ex)
            {
                throw;
            }
            return adpaterInstance;
        }
        [MethodImpl(MethodImplOptions.Synchronized)]
        private static Base FindBase()
        {
            return (Base)FindAdapter();
        }

	}
}

