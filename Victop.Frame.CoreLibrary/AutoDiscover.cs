//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.CoreLibrary
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Management;
    using System.Net;
    using System.Net.Sockets;
    using System.Runtime.CompilerServices;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading;
    using Victop.Frame.PublicLib.Helpers;

	/// <summary>
	/// 自动发现本地SOA及P2P信息
	/// </summary>
	/// <remarks>自动发现本地SOA及P2P信息</remarks>
	public class AutoDiscover
	{
        /// <summary>
        /// 接收线程
        /// </summary>
        private Thread receiveThread;
        /// <summary>
        /// 搜索线程
        /// </summary>
        private Thread searchThread;
        private string localIp;
        /// <summary>
        /// 本地IP地址
        /// </summary>
        public string LocalIp
        {
            get { return localIp; }
            set { localIp = value; }
        }
        /// <summary>
        /// 监听的本地端口号
        /// </summary>
        private int localPort = 7777;
        /// <summary>
        /// 本地Socket侦听
        /// </summary>
        private Socket localSocket;
        private bool isRun;
        /// <summary>
        /// 是否运行
        /// </summary>
        public bool IsRun
        {
            get { return isRun; }
            set { isRun = value; }
        }
        private int broadCastTime = 3;
        /// <summary>
        /// 广播次数
        /// </summary>
        public int BroadCastTime
        {
            get { return broadCastTime; }
            set { broadCastTime = value; }
        }
        private int startPoint;
        /// <summary>
        /// 广播开始端口
        /// </summary>
        public int StartPoint
        {
            get { return startPoint; }
            set { startPoint = value; }
        }
        private int endPoint;
        /// <summary>
        /// 广播结束端口
        /// </summary>
        public int EndPoint
        {
            get { return endPoint; }
            set { endPoint = value; }
        }
        private List<string> localServerList;
        /// <summary>
        /// 本地SOA列表
        /// </summary>
        public List<string> LocalServerList
        {
            get
            {
                if (localServerList == null)
                    localServerList = new List<string>();
                return localServerList;
            }
            set { localServerList = value; }
        }
        public AutoDiscover()
        {
            GetLocalIP();
        }
        private static AutoDiscover instance = null;
        /// <summary>
        /// 自动发现实例
        /// </summary>
        /// <returns></returns>
        public static AutoDiscover GetInstance()
        {
            if (instance == null)
            {
                instance = new AutoDiscover();
            }
            return instance;
        }
        /// <summary>
        /// 获取本地IP地址
        /// </summary>
        private void GetLocalIP()
        {
            IPAddress myIP = null;
            IPAddress[] ip = Dns.GetHostAddresses(Dns.GetHostName());
            for (int i = 0; i < ip.Length; i++)
            {
                if (ip[i].AddressFamily.ToString() == ProtocolFamily.InterNetwork.ToString())
                {
                    myIP = ip[i];
                    break;
                }
            }
            LocalIp = myIP.ToString();//获得本地IPV4地址
        }
		/// <summary>
		/// 开始发现
		/// </summary>
		public virtual void StartDiscover()
		{
            IsRun = true;
            LocalServerList.Clear();
            try
            {
                receiveThread = new Thread(ReceiveData);
                receiveThread.IsBackground = true;
                receiveThread.Start();
                searchThread = new Thread(new ParameterizedThreadStart(SearchHost));
                searchThread.Start(BroadCastTime);
            }
            catch (Exception ex)
            {
                throw;
            }
		}

		/// <summary>
		/// 停止自动发现
		/// </summary>
		public virtual void StopDiscover()
		{
            IsRun = false;
            try
            {
                localSocket.Close();
                localSocket.Dispose();
                localSocket = null;
                if (receiveThread != null)
                    receiveThread.Abort();
            }
            catch (Exception ex)
            {

                throw;
            }
		}

		/// <summary>
		/// 查找局域网内本地云
		/// </summary>
        [MethodImpl(MethodImplOptions.Synchronized)]
		private void SearchHost(object time)
		{
            int count = 0;
            string broadcastip = GetBroadcastAddress();
            while (count < (int)BroadCastTime)
            {
                try
                {
                    byte[] call = new byte[100];
                    Socket sendAll = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
                    sendAll.SetSocketOption(SocketOptionLevel.Socket, SocketOptionName.Broadcast, 1);
                    call = Encoding.UTF8.GetBytes("~" + LocalIp + ":" + localPort);
                    sendAll.EnableBroadcast = true;

                    for (int i = StartPoint; i <= EndPoint; i++)
                    {
                        IPEndPoint allIP = new IPEndPoint(IPAddress.Parse(broadcastip), i);
                        sendAll.SendTo(call, allIP);
                    }
                    sendAll.Close();
                }
                catch (Exception e)
                {
                }
                count++;
                Thread.Sleep(64);
            }
            StopDiscover();
		}

		/// <summary>
		/// 监听接收消息
		/// </summary>
		private void ReceiveData()
		{
            Random random = new Random();
            localPort = random.Next(1025, 65535);
            while (IsRun)
            {
                try
                {
                    int recv;
                    string message;
                    byte[] rdata = new byte[1024];
                    IPEndPoint local = new IPEndPoint(IPAddress.Any, localPort);//监听端口
                    localSocket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
                    localSocket.Bind(local);//绑定监听端口
                    IPEndPoint sendpoint = new IPEndPoint(IPAddress.Any, 0);
                    EndPoint remote = (EndPoint)sendpoint;
                    recv = localSocket.ReceiveFrom(rdata, ref remote);
                    localSocket.Close();//关闭socket实例
                    message = Encoding.UTF8.GetString(rdata).ToString();
                    if (message.Substring(0, 1) != "~")//接收查询主机指令
                    {
                        string hostStr = JsonHelper.ReadJsonString(message, "AllinoneServerIp") + ":" + JsonHelper.ReadJsonString(message, "AllinoneServerPort");
                        CheckAndUpdateServerList(hostStr);
                    }
                }
                catch (SocketException ex)
                {
                    localPort += 10;
                    if (localPort > 65535)
                    {
                        StopDiscover();
                        localPort -= 10;
                        return;
                    }
                }
            }
		}
        /// <summary>
        /// 判定IP地址并更新服务
        /// </summary>
        /// <param name="serverIp"></param>
        private void CheckAndUpdateServerList(string serverIp)
        {
            string pattern = "\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}:\\d{1,5}";
            if (Regex.IsMatch(serverIp, pattern))
            {
                if (!LocalServerList.Contains(serverIp))
                    LocalServerList.Add(serverIp);
            }
        }
        /// <summary>
        /// 取得IP地址,子网掩码,并计算广播地址
        /// <remarks>
        /// 如果本机有多个网络连接点,将只显示最后一个的信息.
        /// </remarks>
        /// </summary>
        private string GetBroadcastAddress()
        {
            try
            {
                ManagementClass mc = new ManagementClass("Win32_NetworkAdapterConfiguration");
                ManagementObjectCollection nics = mc.GetInstances();
                foreach (ManagementObject nic in nics)
                {
                    if (Convert.ToBoolean(nic["ipEnabled"]) == true)
                    {
                        if (LocalIp == (nic["IPAddress"] as String[])[0])
                        {
                            string subnetMaskAddress = (nic["IPSubnet"] as String[])[0];
                            return CalcBroadcast(LocalIp, subnetMaskAddress);//计算广播地址
                        }
                    }
                }
            }
            catch
            {
                return LocalIp.Substring(0, LocalIp.LastIndexOf('.') + 1) + "255";
            }
            return LocalIp.Substring(0, LocalIp.LastIndexOf('.') + 1) + "255";
        }


        /// <summary>
        /// 计算广播地址算法
        /// <remarks>        
        /// 计算方法 
        ///首先 计算网络地址 = IP地址  逻辑与(&)  子网掩码 
        ///先把IP，子网掩码转为2进制，然后进行逻辑与运算，得出网络地址 
        ///<example>
        ///例： 
        ///IP 192.168.1.3  子网掩码 255.255.0.0 
        ///IP转二进制 11000000.10100100.00000001.00000011 
        ///子网掩码    11111111.11111111.00000000.00000000 
        ///与运算后    11000000.10100100.00000000.00000000 
        ///192.168.0.0这就是网络地址，其中子网掩码全1对应为网络号,全0对应的是主机号,
        ///即192.168.0.0对应的网络号为192.168,主机号为0.0.
        ///将网络地址主机部分全取反后得到的地址便是广播地址: 
        ///广播地址    11000000.10100100.11111111.11111111 
        ///换成10进制则为192.168.0.0 
        ///</example>
        /// </remarks>
        /// </summary>
        private string CalcBroadcast(string localIPAddress, string subnetMaskAddress)
        {
            string[] IPAddresses = localIPAddress.Split(new char[] { '.' });
            string[] subnetMaskAddresses = subnetMaskAddress.Split(new char[] { '.' });
            byte[] IPParts = new byte[4];//IP
            byte[] maskParts = new byte[4];//子网掩码
            byte[] netParts = new byte[4];//网络地址
            for (int i = 0; i < 4; i++)
            {
                IPParts[i] = byte.Parse(IPAddresses[i]);
                maskParts[i] = byte.Parse(subnetMaskAddresses[i]);
                byte ip = IPParts[i];
                byte mask = maskParts[i];
                netParts[i] = ((byte)(ip & mask));//与运算后是网络地址
            }
            //网络号
            ulong netId = 0;
            for (int i = 0; i < 4; i++)
            {
                netId += netParts[i];
                if (i < 3)
                    netId <<= 8;
            }
            ulong IPMask = 0;
            for (int i = 0; i < 4; i++)
            {
                IPMask += maskParts[i];
                if (i < 3)
                    IPMask <<= 8;
                else
                    IPMask = ~IPMask;
            }
            //算广播地址
            ulong broadcastId = IPMask | netId;
            byte[] bIPParts = new byte[4];
            for (int i = 3; i >= 0; i--)
            {
                bIPParts[i] = ((byte)(broadcastId & 255));
                if (i > 0)
                    broadcastId >>= 8;
            }
            string broadcastAddress = string.Format("{0}.{1}.{2}.{3}", bIPParts[0], bIPParts[1], bIPParts[2], bIPParts[3]);
            return broadcastAddress;
        }
	}
}

