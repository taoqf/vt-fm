//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.Adapter
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading;
    using Victop.Frame.CoreLibrary.Models;

    /// <summary>
    /// 消息池管理器
    /// </summary>
    /// <remarks>消息池管理器</remarks>
    public class MessagePoolManager
    {
        private static ObjectPool<string, RequestMessage> messagePool;
        /// <summary>
        /// 消息池
        /// </summary>
        public static ObjectPool<string, RequestMessage> MessagePool
        {
            get
            {
                if (messagePool == null)
                {
                    messagePool = new ObjectPool<string, RequestMessage>();
                }
                return messagePool;
            }
        }


        /// <summary>
        /// 保存消息数据
        /// </summary>
        public virtual bool SaveMessageData(RequestMessage requestMessage)
        {
            bool flag = false;
            try
            {
                if (requestMessage != null)
                {
                    RequestMessage rMessage = MessagePool.Add(requestMessage.ReplyToId, requestMessage);
                    if (rMessage != null)
                    {
                        flag = true;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return flag;
        }

        /// <summary>
        /// 获取消息数据
        /// </summary>
        public virtual RequestMessage GetMessageData(string messageId)
        {
            RequestMessage requestMessage = new RequestMessage();
            try
            {
                if (!string.IsNullOrEmpty(messageId))
                {
                    requestMessage = MessagePool.Get(messageId);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return requestMessage;
        }

        /// <summary>
        /// 移除消息数据
        /// </summary>
        public virtual bool RemoveMessageData(string messageId)
        {
            bool flag = false;
            try
            {
                if (!string.IsNullOrEmpty(messageId))
                {
                    RequestMessage requestMessage = MessagePool.Remove(messageId);
                    if (requestMessage != null)
                    {
                        flag = true;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return flag;
        }

        /// <summary>
        /// 根据消息id创建消息池,用于存储通信器返回数据
        /// </summary>
        public virtual bool CreateMessagePool(string messageId)
        {
            bool flag = false;
            try
            {
                if (!string.IsNullOrEmpty(messageId))
                {
                    RequestMessage requestMessage = null;
                    requestMessage = MessagePool.Get(messageId);
                    if (requestMessage != null)
                    {
                        flag = true;
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return flag;
        }
        /// <summary>
        /// 清理消息缓存池的线程.
        /// </summary>
        public virtual void ClearMessagePool()
        {
            while (true)
            {
                try
                {
                    foreach (string id in MessagePool.PoolMap.Keys)
                    {
                        DateTime lastDate = MessagePool.GetLastDate(id);
                        if (null == lastDate)
                        {
                            continue;
                        }
                        DateTime nowDate = DateTime.Now;
                        long timeout = (nowDate.Ticks - lastDate.Ticks) / 10000;
                        if (TimeSet.CLEAR_TIMEOUT < timeout)
                        {
                            messagePool.Remove(id);
                        }
                        else
                        {
                            break;
                        }
                        try
                        {
                            Thread.Sleep((int)TimeSet.CLEAR_SLEEP_TIME);
                        }
                        catch (ThreadInterruptedException ex)
                        {
                            throw ex;
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }
        }
    }
}

