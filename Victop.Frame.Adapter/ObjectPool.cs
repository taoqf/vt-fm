//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.Adapter
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    /// <summary>
    /// 缓冲池
    /// </summary>
    /// <remarks>缓冲池</remarks>
    public class ObjectPool<K, V>
    {
        private Dictionary<K, VEntry<V>> poolMap;
        /// <summary>
        /// 缓冲池
        /// </summary>
        public virtual Dictionary<K, VEntry<V>> PoolMap
        {
            get
            {
                if (poolMap == null)
                {
                    poolMap = new Dictionary<K, VEntry<V>>();
                }
                return poolMap;
            }
        }

        /// <summary>
        /// 往缓冲池中添加一个对象
        /// </summary>
        /// <param name="id">缓冲池的健</param>
        /// <param name="obj">缓冲池的对象</param>
        /// <param name="debug">是否日志输出</param>
        /// <returns>添加的对象</returns>
        public virtual V Add(K id, V obj, bool debug)
        {
            try
            {
                if (id != null && obj != null)
                {
                    VEntry<V> oldEntry = null;
                    if (PoolMap.ContainsKey(id))
                    {
                        oldEntry = PoolMap[id];
                    }
                    if (oldEntry != null)
                    {
                        if (obj.Equals(oldEntry.EntryObject))
                        {
                            return obj;
                        }
                        else
                        {
                            Remove(id);
                        }
                    }
                    VEntry<V> entry = new VEntry<V>(obj, DateTime.Now);
                    PoolMap.Add(id, entry);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return obj;
        }

        /// <summary>
        /// 向缓冲中添加一个对象
        /// </summary>
        /// <param name="id">对象的键</param>
        /// <param name="obj">对象</param>
        /// <returns>V</returns>
        public virtual V Add(K id, V obj)
        {
            bool debug = false;
            return Add(id, obj, debug);
        }

        /// <summary>
        /// 获取缓冲池中的一个对象
        /// </summary>
        /// <param name="id">对象在缓冲池中的键</param>
        /// <param name="debug">是否输入日志</param>
        /// <returns>V</returns>
        public virtual V Get(K id, bool debug)
        {
            V obj = default(V);
            try
            {
                VEntry<V> entry = null;
                if (PoolMap.ContainsKey(id))
                {
                    entry = PoolMap[id];
                    obj = entry.EntryObject;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return obj;
        }

        /// <summary>
        /// 获取缓冲池中的一个对象
        /// </summary>
        /// <param name="id">对象在缓冲池中的键</param>
        /// <returns>V</returns>
        public virtual V Get(K id)
        {
            bool debug = false;
            return Get(id, debug);
        }

        /// <summary>
        /// 移除缓冲池的一个对象
        /// </summary>
        /// <param name="id">对象在缓冲池中的键</param>
        /// <param name="debug">是否输入日志</param>
        /// <returns>V</returns>
        public virtual V Remove(K id, bool debug)
        {
            V obj = default(V);
            try
            {
                VEntry<V> entry = null;
                if (PoolMap.ContainsKey(id))
                {
                    entry = PoolMap[id];
                }
                if (null != entry)
                {
                    obj = entry.EntryObject;
                    PoolMap.Remove(id);
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return obj;
        }

        /// <summary>
        /// 移除缓冲池中的一个对象
        /// </summary>
        /// <param name="id">对象在缓冲池中的键</param>
        /// <returns>V</returns>
        public virtual V Remove(K id)
        {
            bool debug = false;
            return Remove(id, debug);
        }

        /// <summary>
        /// 刷新缓冲池中对象的时间
        /// </summary>
        /// <param name="id">缓冲池中对象的键</param>
        /// <param name="debug">是否输入日志</param>
        /// <returns>V</returns>
        public virtual V Refresh(K id, bool debug)
        {
            V obj = default(V);
            try
            {
                VEntry<V> entry = null;
                if (PoolMap.ContainsKey(id))
                {
                    entry = PoolMap[id];
                }
                if (null != entry)
                {
                    entry.LastDate = DateTime.Now;
                    entry.Refresh += 1;
                    PoolMap.Remove(id);
                    PoolMap.Add(id, entry);
                    obj = entry.EntryObject;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return obj;
        }

        /// <summary>
        /// 刷新缓冲池中对象的时间
        /// </summary>
        /// <param name="id">缓冲池中对象的键</param>
        /// <returns>V</returns>
        public virtual V Refresh(K id)
        {
            bool debug = true;
            return Refresh(id, debug);
        }

        /// <summary>
        /// 获取缓冲池中对象刷新次数
        /// </summary>
        /// <param name="id">对象在缓冲池中的键</param>
        /// <returns>int</returns>
        public virtual int GetRefreshTime(K id)
        {
            int refresh = 0;
            try
            {
                VEntry<V> entry = null;
                if (PoolMap.ContainsKey(id))
                {
                    entry = PoolMap[id];
                }
                if (null != entry)
                {
                    refresh = entry.Refresh;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return refresh;
        }
        /// <summary>
        /// 获取对象在缓冲池中最后刷新的时间
        /// </summary>
        /// <param name="id">对象在缓冲池中的键</param>
        /// <returns>DateTime</returns>
        public virtual DateTime GetLastDate(K id)
        {
            DateTime lastDate = DateTime.MinValue;
            try
            {
                VEntry<V> entry = null;
                if (PoolMap.ContainsKey(id))
                {
                    entry = PoolMap[id];
                }
                if (null != entry)
                {
                    lastDate = entry.LastDate;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
            return lastDate;
        }
    }
}

