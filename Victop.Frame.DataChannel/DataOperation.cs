//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.DataChannel
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Data;
    using Victop.Frame.CoreLibrary;
    using Victop.Frame.CoreLibrary.Models;

    /// <summary>
    /// 数据操作
    /// </summary>
    /// <remarks>数据操作类</remarks>
    public class DataOperation
    {
        /// <summary>
        /// 根据通道号获取数据集
        /// </summary>
        /// <param name="channelId">通道号</param>
        public virtual DataSet GetData(string channelId)
        {
            DataChannelManager dataChannelManager = new DataChannelManager();
            Hashtable hashData = dataChannelManager.GetData(channelId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            return channelData.DataInfo;
        }
        /// <summary>
        /// 获取数据集
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="dataPath"></param>
        /// <param name="structDs"></param>
        /// <returns></returns>
        public virtual DataSet GetData(string channelId, string dataPath, DataSet structDs = null)
        {
            DataConvertManager convertManager = new DataConvertManager();
            return convertManager.GetDataSet(channelId, dataPath, structDs);
        }

        public virtual DataSet GetDataEx(string channelId, string dataPath, DataSet structDs = null)
        {
            DataConvertManager convertManager = new DataConvertManager();
            return convertManager.GetDataSetEx(channelId, dataPath, structDs);
        }
        /// <summary>
        /// 保存数据集
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="dataPath"></param>
        /// <returns></returns>
        public virtual bool SaveData(string channelId, string dataPath)
        {
            DataConvertManager convertManager = new DataConvertManager();
            return convertManager.SaveData(channelId, dataPath);
        }
        /// <summary>
        /// 根据通道号获取JSON数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <returns></returns>
        public virtual string GetJSONData(string channelId)
        {
            DataChannelManager dataChannelManager = new DataChannelManager();
            Hashtable hashData = dataChannelManager.GetData(channelId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            return channelData.JSONData;
        }
        /// <summary>
        /// 获取简单引用数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="dataPath"></param>
        /// <param name="columnName"></param>
        /// <param name="dependValue"></param>
        /// <returns></returns>
        public virtual DataSet GetSimpDefData(string channelId, string dataPath, string columnName, string target, string targetValue, Dictionary<string, object> dependDic = null)
        {
            DataConvertManager convertManager = new DataConvertManager();
            return convertManager.GetSimpleRef(channelId, dataPath, columnName, target, targetValue, dependDic);
        }
        /// <summary>
        /// 获取简单引用数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="dataPath"></param>
        /// <param name="columnName"></param>
        /// <param name="dependValue"></param>
        /// <returns></returns>
        public virtual DataSet GetSimpDefData(string channelId, string dataPath, string columnName, Dictionary<string, object> dependDic = null)
        {
            DataConvertManager convertManager = new DataConvertManager();
            return convertManager.GetSimpleRef(channelId, dataPath, columnName, dependDic);
        }
        /// <summary>
        /// 根据通道号获取curdJSON数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <returns></returns>
        public virtual List<object> GetCurdJSONData(string channelId)
        {
            DataChannelManager dataChannelManager = new DataChannelManager();
            Hashtable hashData = dataChannelManager.GetData(channelId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            return channelData.CrudJSONData;
        }
        /// <summary>
        /// 保存JSON数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="saveData"></param>
        /// <returns></returns>
        internal bool SaveJSONData(string channelId, string saveData)
        {
            DataChannelManager dataChannelManager = new DataChannelManager();
            Hashtable hashData = dataChannelManager.GetData(channelId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            channelData.JSONData = saveData;
            return dataChannelManager.UpdateData(channelId, hashData);
        }
        /// <summary>
        /// 保存curdJSON数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="saveData"></param>
        /// <returns></returns>
        internal bool SaveCurdJSONData(string channelId, List<object> saveData)
        {
            DataChannelManager dataChannelManager = new DataChannelManager();
            Hashtable hashData = dataChannelManager.GetData(channelId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            channelData.CrudJSONData = saveData;
            return dataChannelManager.UpdateData(channelId, hashData);
        }
        /// <summary>
        /// 根据对象Id获取插件信息
        /// </summary>
        /// <param name="objectId">对象id</param>
        /// <returns></returns>
        public virtual List<Dictionary<string, object>> GetPluginInfo()
        {
            List<Dictionary<string, object>> pluginList = new List<Dictionary<string, object>>();
            ActivePluginManager pluginManager = new ActivePluginManager();
            Dictionary<string, ActivePluginInfo> pluginInfoDic = pluginManager.GetActivePlugins();
            foreach (string item in pluginInfoDic.Keys)
            {
                ActivePluginInfo pluginInfo = pluginInfoDic[item];
                Dictionary<string, object> pluginDict = new Dictionary<string, object>();
                pluginDict.Add("AppId", pluginInfo.AppId);
                pluginDict.Add("IPlugin", pluginInfo.PluginInstance);
                pluginDict.Add("ObjectId", pluginInfo.ObjectId);
                pluginList.Add(pluginDict);
            }
            return pluginList;
        }
    }
}

