//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.DataChannel
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Data;
    using Victop.Frame.CoreLibrary;
    using Victop.Frame.CoreLibrary.Models;
    using Victop.Frame.CoreLibrary.MongoModel;
    using Victop.Frame.PublicLib.Helpers;
    using Victop.Frame.DataChannel.Enums;
    using System;

    /// <summary>
    /// 数据操作
    /// </summary>
    /// <remarks>数据操作类</remarks>
    public class DataOperation
    {
        /// <summary>
        /// 获取数据集
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="dataPath"></param>
        /// <param name="structDs"></param>
        /// <returns></returns>
        public virtual DataSet GetData(string channelId, string dataPath, DataSet structDs = null)
        {
            DataConvertManager convertManager = new DataConvertManager();
            return convertManager.GetDataSet(channelId, dataPath, structDs);
        }
        /// <summary>
        /// 保存数据集
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="dataPath"></param>
        /// <returns></returns>
        public virtual bool SaveData(string channelId, string dataPath)
        {
            DataConvertManager convertManager = new DataConvertManager();
            if (convertManager.SaveData(channelId, dataPath))
            {
                //TODO:调用JS方法检查操作的数据权限，传入CurdList数据,数据权限数据
                return convertManager.CheckDataAuthority(channelId);
                //return true;
            }
            else
            {
                return false;
            }

        }
        /// <summary>
        /// 重置数据
        /// </summary>
        /// <param name="channelId">通道标识</param>
        /// <param name="dataPath">路径信息</param>
        /// <returns></returns>
        public virtual bool ResetData(string channelId, string dataPath, bool cascading)
        {
            DataChannelManager dataChannelManager = new DataChannelManager();
            Hashtable hashData = dataChannelManager.GetData(channelId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            channelData.JSONData = channelData.OriginalJsonData;
            try
            {
                if (channelData.CrudJSONData != null && channelData.CrudJSONData.Count > 0)
                {
                    List<object> curdDataList = new List<object>();
                    foreach (Dictionary<string, object> item in channelData.CrudJSONData)
                    {
                        string pathStr = JsonHelper.ToJson(item["path"]);
                        if (cascading ? pathStr.StartsWith(dataPath.TrimEnd(']')) : pathStr.Equals(dataPath))
                        {
                            continue;
                        }
                        else
                        {
                            DataTool.SaveDataByPath(channelId, (List<object>)item["path"], (Dictionary<string, object>)item["rowdata"], (OpreateStateEnum)item["flag"]);
                            curdDataList.Add(item);
                        }
                    }
                    channelData.CrudJSONData = curdDataList;
                }
                return true;
            }
            catch (Exception ex)
            {
                LoggerHelper.InfoFormat("重置数据错误:{0}", ex.Message);
                return false;
            }

        }

        /// <summary>
        /// 根据通道号获取JSON数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <returns></returns>
        public virtual string GetJSONData(string channelId)
        {
            DataChannelManager dataChannelManager = new DataChannelManager();
            Hashtable hashData = dataChannelManager.GetData(channelId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            return channelData.JSONData;
        }
        /// <summary>
        /// 获取指定路径下的Json数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="dataPath"></param>
        /// <returns></returns>
        public virtual string GetJSONData(string channelId, string dataPath)
        {
            DataConvertManager dataManager = new DataConvertManager();
            return dataManager.GetJsonData(channelId, dataPath);
        }
        /// <summary>
        /// 获取简单引用数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="dataPath"></param>
        /// <param name="columnName"></param>
        /// <param name="dependValue"></param>
        /// <returns></returns>
        public virtual DataSet GetSimpDefData(string channelId, string dataPath, string columnName, string target, string targetValue, Dictionary<string, object> dependDic = null)
        {
            DataConvertManager convertManager = new DataConvertManager();
            return convertManager.GetSimpleRef(channelId, dataPath, columnName, target, targetValue, dependDic);
        }
        /// <summary>
        /// 获取简单引用数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="dataPath"></param>
        /// <param name="columnName"></param>
        /// <param name="dependValue"></param>
        /// <returns></returns>
        public virtual DataSet GetSimpDefData(string channelId, string dataPath, string columnName, Dictionary<string, object> dependDic = null)
        {
            DataConvertManager convertManager = new DataConvertManager();
            return convertManager.GetSimpleRef(channelId, dataPath, columnName, dependDic);
        }
        /// <summary>
        /// 根据通道号获取curdJSON数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <returns></returns>
        public virtual List<object> GetCurdJSONData(string channelId)
        {
            DataChannelManager dataChannelManager = new DataChannelManager();
            Hashtable hashData = dataChannelManager.GetData(channelId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            return channelData.CrudJSONData;
        }
        /// <summary>
        /// 保存JSON数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="saveData"></param>
        /// <returns></returns>
        internal bool SaveJSONData(string channelId, string saveData)
        {
            DataChannelManager dataChannelManager = new DataChannelManager();
            Hashtable hashData = dataChannelManager.GetData(channelId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            channelData.JSONData = saveData;
            return dataChannelManager.UpdateData(channelId, hashData);
        }
        /// <summary>
        /// 保存curdJSON数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <param name="saveData"></param>
        /// <returns></returns>
        internal bool SaveCurdJSONData(string channelId, List<object> saveData)
        {
            DataChannelManager dataChannelManager = new DataChannelManager();
            Hashtable hashData = dataChannelManager.GetData(channelId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            channelData.CrudJSONData = saveData;
            return dataChannelManager.UpdateData(channelId, hashData);
        }
        /// <summary>
        /// 根据对象Id获取插件信息
        /// </summary>
        /// <param name="objectId">对象id</param>
        /// <returns></returns>
        public virtual List<Dictionary<string, object>> GetPluginInfo()
        {
            List<Dictionary<string, object>> pluginList = new List<Dictionary<string, object>>();
            ActivePluginManager pluginManager = new ActivePluginManager();
            Dictionary<string, ActivePluginInfo> pluginInfoDic = pluginManager.GetActivePlugins();
            foreach (string item in pluginInfoDic.Keys)
            {
                ActivePluginInfo pluginInfo = pluginInfoDic[item];

                Dictionary<string, object> pluginDict = new Dictionary<string, object>();
                pluginDict.Add("AppId", pluginInfo.AppId);
                pluginDict.Add("IPlugin", pluginInfo.PluginInstance);
                pluginDict.Add("ObjectId", pluginInfo.ObjectId);
                pluginList.Add(pluginDict);
            }
            return pluginList;
        }
        /// <summary>
        /// 根据BusinessKey获取活动插件
        /// </summary>
        /// <param name="businessKey"></param>
        /// <returns></returns>
        public virtual Dictionary<string, object> GetPluginInfoByBusinessKey(string businessKey)
        {
            Dictionary<string, object> pluginDic = new Dictionary<string, object>();
            ActivePluginManager pluginManager = new ActivePluginManager();
            Dictionary<string, ActivePluginInfo> pluginInfoDic = pluginManager.GetActivePlugins();
            foreach (string item in pluginInfoDic.Keys)
            {
                ActivePluginInfo pluginInfo = pluginInfoDic[item];
                if (pluginInfo.BusinessKey.Equals(businessKey))
                {
                    pluginDic.Add("IPlugin", pluginInfo.PluginInstance);
                    break;
                }
            }
            return pluginDic;
        }

        /// <summary>
        /// 释放数据
        /// </summary>
        /// <param name="channelId"></param>
        /// <returns></returns>
        public virtual bool DisposeData(string channelId)
        {
            DataConvertManager convertManager = new DataConvertManager();
            return convertManager.DisposeData(channelId);
        }
        /// <summary>
        /// 获取模型关系
        /// </summary>
        /// <param name="channelId"></param>
        /// <returns></returns>
        public virtual string GetModelRelation(string channelId)
        {
            DataConvertManager convertManager = new DataConvertManager();
            return convertManager.GetModelRelation(channelId);
        }
        /// <summary>
        /// 获取通道数据
        /// </summary>
        /// <param name="viewId"></param>
        /// <returns></returns>
        public virtual ChannelData GetChannelData(string viewId)
        {
            DataChannelManager dataChannelManager = new DataChannelManager();
            Hashtable hashData = dataChannelManager.GetData(viewId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            return channelData;
        }
    }
}

