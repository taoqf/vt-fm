<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GetDataByPathScript" xml:space="preserve">
    <value>var result = (function (p_data, p_path) {
                        if (!p_path || p_path.length === 0) {
                        return null;
                        }
                if (p_data) {
                for (var i = 0; i &lt; p_path.length; i++) {
                if (i % 2 === 0) { //取对象根据对象返回dataArray(path偶数)
                p_data = p_data[p_path[i]];
                if (!p_data) {
                    return null;
                }
                } else if (i % 2 === 1) { //取dataArray中node，即一行数据 (path奇数)
                p_data = p_data.dataArray;
                var key_val = p_path[i];
                var bfind = false;
                for (var j = p_data.length; j--;) {
                    var p_item = p_data[j];
                    if (key_val.key in p_item &amp;&amp; key_val.value === p_item[key_val.key]) {
                        p_data = p_item;
                        bfind = true;
                        break;
                    }
                }
                if (!bfind) {
                    return null;
                }
                }
            }
        }
        return p_data;
        })(data, path);</value>
    <comment>获取数据的JS的脚本</comment>
  </data>
  <data name="SaveOriginalDataScript" xml:space="preserve">
    <value>var result= (function(jsonData, curdList) { 
var isString = function(it) { 
// summary: 
//	 Return true if it is a String 
// it: anything 
//	 Item to test. 
return (typeof it == "string" || it instanceof String); // Boolean 
}; 
if (!jsonData || !curdList) { 
return; 
} 
if (isString(jsonData)) { 
jsonData = JSON.parse(jsonData); 
} 
if (isString(curdList)) { 
curdList = JSON.parse(curdList); 
} 

var docDataStore = jsonData.docDataStore; 
if (!docDataStore) { 
return; 
} 

var _mixin = function(dest, source) { 
var name, s, i, empty = {}; 
for (name in source) { 
s = source[name]; 
if (!(name in dest) || (dest[name] !== s &amp;&amp; (!(name in empty) || empty[name] !== s))) { 
dest[name] = s; 
} 
} 

return dest; // Object 
}; 
var mixin = function(dest, sources) { 
if (!dest) { 
dest = {}; 
} 
for (var i = 1, l = arguments.length; i &lt; l; i++) { 
_mixin(dest, arguments[i]); 
} 
return dest; // Object 
}; 
var isArray = function(it) { 
// summary: 
//	 Return true if it is an Array. 
//	 Does not work on Arrays created in other windows. 
// it: anything 
//	 Item to test. 
return it &amp;&amp; (it instanceof Array || typeof it == "array"); // Boolean 
}; 
var isObject = function(it) { 
// summary: 
//	 Returns true if it is a JavaScript object (or an Array, a Function 
//	 or null) 
// it: anything 
//	 Item to test. 
return it !== undefined &amp;&amp; 
(it === null || typeof it == "object" || isArray(it) || isFunction(it)); // Boolean 
}; 
var isFunction = function(it) { 
// summary: 
//	 Return true if it is a Function 
// it: anything 
//	 Item to test. 
return Object.prototype.toString.call(it) === "[object Function]"; 
}; 
var equals = function(p_o1, p_o2) { 
// both are undefined 
if (p_o1 === undefined &amp;&amp; p_o2 === undefined) { 
return true; 
} 
// both are null 
if (p_o1 === null &amp;&amp; p_o2 === null) { 
return true; 
} 
// one of them is null or undefined, while the other is not 
if (p_o1 === undefined || p_o1 === null || p_o2 === undefined || p_o2 === null) { 
return false; 
} 
// both are arrays 
if (isArray(p_o1) &amp;&amp; isArray(p_o2)) { 
if (p_o1.length !== p_o2.length) { 
return false; 
} 
for (var i = p_o1.length; i--;) { 
if (!equals(p_o1[i], p_o2[i])) { 
return false; 
} 
} 
return true; 
} 
// both are strings 
if (isString(p_o1) &amp;&amp; isString(p_o2)) { 
return p_o1 === p_o2; 
} 
// both are objects 
if (isObject(p_o1) &amp;&amp; isObject(p_o2)) { 
var o = mixin({}, p_o1, p_o2); 
for (var key in o) { 
if ((p_o1.hasOwnProperty(key) &amp;&amp; !p_o2.hasOwnProperty(key)) || (!p_o1.hasOwnProperty(key) &amp;&amp; p_o2.hasOwnProperty(key))) { 
return false; 
} else if (p_o1.hasOwnProperty(key) &amp;&amp; p_o2.hasOwnProperty(key) &amp;&amp; !equals(p_o1[key], p_o2[key])) { 
return false; 
} 
} 
return true; 
} 
// todo: when p_o1 and p_o2 are functions 
return p_o1 === p_o2; 
}; 
var get_data_by_path = function(data, path) { 
if (!path || path.length === 0) { 
return null; 
} 
if (data) { 
// console.debug('get_data_by_path:begin:', locale.format(new Date(), { 
// selector: 'time', 
// timePattern: 'a HH:mm:ss.SSS' 
// })); 

for (var i = 0; i &lt; path.length; i++) { 
if (i % 2 === 0) { 
data = data[path[i]]; 
if (!data) { 
return null; 
} 
} else if (i % 2 === 1) { 
data = data.dataArray; 
var key_val = path[i]; 
var field = key_val.key; 
var value = key_val.value; 
if (!data.some(function(item) { 
if (equals(value, item[field])) { 
data = item; 
return true; 
} 
})) { 
console.error('未查找到数据'); 
return {}; 
} 
} 
} 
} else { 
console.info("数据不存在！"); 
console.log(data, path); 
} 
return data; 
}; 
/* 
* 1 （原数据） 
* 2 （删除） 
* 4 (新增) 
* 8 (修改) 
*/ 
curdList.forEach(function(data, idx) { 
// debugger; 
var ora_data = data.OriginalDataDic; 
var cur_data = data.SaveDataDic; 
switch (data.OpStatus) { 
case 8: 
var d = get_data_by_path(docDataStore, data.DataPath); 
mixin(d, cur_data); 
break; 
case 4: 
if (data.DataPath.length % 2 === 0) { 
data.DataPath.pop(); 
} 
var d = get_data_by_path(docDataStore, data.DataPath); 
d &amp;&amp; d.dataArray &amp;&amp; d.dataArray.push(cur_data); 
break; 
case 2: 
if (data.DataPath.length % 2 === 0) { 
var key_val = data.DataPath.pop(); 
} 
debugger; 
var d = get_data_by_path(docDataStore, data.DataPath); 
if (d &amp;&amp; d.dataArray) { 
d = d.dataArray; 
d.some(function(item, idx){ 
if (equals(cur_data._id, item['_id'])) { 
data = item; 
d = d.splice(idx, 1); 
return true; 
} 
}); 
} 
break; 
case 1: 
break; 
} 
}); 
// delete json.curdList; 
return JSON.stringify(jsonData); 
})(data, curdList);</value>
    <comment>保存原始JSON</comment>
  </data>
</root>