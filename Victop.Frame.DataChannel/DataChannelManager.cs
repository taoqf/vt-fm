//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.DataChannel
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using System.Text;
    using Victop.Frame.CoreLibrary.Models;
    using Victop.Frame.PublicLib.Helpers;

    /// <summary>
    /// 数据通道管理器
    /// </summary>
    /// <remarks>数据通道管理器</remarks>
    public class DataChannelManager
    {
        private static Hashtable channelMap;
        /// <summary>
        /// 通道集合
        /// </summary>
        internal static Hashtable ChannelMap
        {
            get
            {
                if (channelMap == null)
                    channelMap = new Hashtable();
                return channelMap;
            }
            set
            {
                channelMap = value;
            }
        }

        /// <summary>
        /// 添加数据
        /// </summary>
        public virtual bool AddData(string channelId, Hashtable replyHashtable)
        {
            try
            {
                if (!ChannelMap.ContainsKey(channelId))
                {
                    ChannelMap.Add(channelId, replyHashtable);
                }
                else
                {
                    UpdateData(channelId, replyHashtable);
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// 更新数据
        /// </summary>
        public virtual bool UpdateData(string channelId, Hashtable replyHashtable)
        {
            if (ChannelMap.ContainsKey(channelId))
            {
                ChannelMap[channelId] = replyHashtable;
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 删除数据
        /// </summary>
        public virtual bool DeleteData(string channelId)
        {
            if (ChannelMap.ContainsKey(channelId))
            {
                ChannelMap.Remove(channelId);
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 插件获取数据
        /// </summary>
        public virtual Hashtable GetData(string channelId)
        {
            if (ChannelMap.ContainsKey(channelId))
            {
                return ChannelMap[channelId] as Hashtable;
            }
            return null;
        }
        /// <summary>
        /// 判定数据是否存在
        /// </summary>
        /// <param name="messageInfo"></param>
        /// <param name="channelId"></param>
        /// <returns></returns>
        public virtual bool CheckDataExist(RequestMessage messageInfo, out string channelId)
        {
            try
            {
                if (ChannelMap.ContainsKey(messageInfo.MessageId))
                {
                    channelId = messageInfo.MessageId;
                    return true;
                }
                channelId = string.Empty;
                return false;
            }
            catch (Exception ex)
            {
                channelId = string.Empty;
                return false;
            }
        }

    }
}

