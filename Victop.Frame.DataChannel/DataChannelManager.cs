//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.DataChannel
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using System.Text;
using Victop.Frame.CoreLibrary.Models;
    using Victop.Frame.PublicLib.Helpers;

	/// <summary>
	/// 数据通道管理器
	/// </summary>
	/// <remarks>数据通道管理器</remarks>
	public class DataChannelManager
	{
        private static Hashtable channelMap;
		/// <summary>
		/// 通道集合
		/// </summary>
		internal static Hashtable ChannelMap
		{
            get
            {
                if (channelMap == null)
                    channelMap = new Hashtable();
                return channelMap;
            }
            set
            {
                channelMap = value;
            }
		}

		/// <summary>
		/// 添加数据
		/// </summary>
		public virtual bool AddData(string channelId, Hashtable replyHashtable)
		{
            try
            {
                if (!ChannelMap.ContainsKey(channelId))
                {
                    ChannelMap.Add(channelId, replyHashtable);
                }
                else
                {
                    UpdateData(channelId, replyHashtable);
                }
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
		}

		/// <summary>
		/// 更新数据
		/// </summary>
        public virtual bool UpdateData(string channelId, Hashtable replyHashtable)
		{
            if (ChannelMap.ContainsKey(channelId))
            {
                ChannelMap[channelId] = replyHashtable;
                return true;
            }
            else
            {
                return false;
            }
		}

		/// <summary>
		/// 删除数据
		/// </summary>
		public virtual bool DeleteData(string channelId)
		{
            if (ChannelMap.ContainsKey(channelId))
            {
                ChannelMap.Remove(channelId);
                return true;
            }
            else
            {
                return false;
            }
		}

		/// <summary>
		/// 插件获取数据
		/// </summary>
		public virtual Hashtable GetData(string channelId)
		{
            if (ChannelMap.ContainsKey(channelId))
            {
                return ChannelMap[channelId] as Hashtable;
            }
            return null;
		}
        /// <summary>
        /// 判定数据是否存在
        /// </summary>
        /// <param name="messageInfo"></param>
        /// <param name="channelId"></param>
        /// <returns></returns>
        public virtual bool CheckDataExist(RequestMessage messageInfo, out string channelId)
        {
            string dataKey = string.Empty;
            channelId = string.Empty;
            Dictionary<string, object> contentDic = JsonHelper.ToObject<Dictionary<string, object>>(messageInfo.MessageContent);
            if (contentDic.ContainsKey("modelId") && !string.IsNullOrEmpty(contentDic["modelId"].ToString()))
            {
                dataKey = contentDic["modelId"].ToString();
            }
            else if (contentDic.ContainsKey("dataparam")&&!string.IsNullOrEmpty(contentDic["dataparam"].ToString()))
            {
                dataKey = JsonHelper.ReadJsonString(contentDic["dataparam"].ToString(), "mastername");
            }
            if (!string.IsNullOrEmpty(dataKey))
            {
                foreach (string key in ChannelMap.Keys)
                {
                    ChannelData channelData = (ChannelData)((Hashtable)(ChannelMap[key]))["Data"];
                    if (JsonHelper.ReadJsonString(channelData.MessageInfo.MessageContent, "modelId").Equals(dataKey))
                    {
                        channelId = key;
                        break;
                    }
                    else
                    {
                        Dictionary<string, object> contDic = JsonHelper.ToObject<Dictionary<string, object>>(channelData.MessageInfo.MessageContent);
                        if (contDic.ContainsKey("dataparam") && !string.IsNullOrEmpty(contDic["dataparam"].ToString()))
                        {
                            if (JsonHelper.ReadJsonString(contDic["dataparam"].ToString(), "mastername").Equals(dataKey))
                            {
                                channelId = key;
                                break;
                            }
                        }
                    }
                }
            }
            if (string.IsNullOrEmpty(channelId))
            {
                return false;
            }
            else
            {
                return true;
            }
        }

	}
}

