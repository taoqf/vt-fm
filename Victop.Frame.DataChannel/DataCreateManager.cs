//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.DataChannel
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Xml;
    using System.Xml.Linq;
    using Victop.Frame.CoreLibrary.Enums;
    using Victop.Frame.CoreLibrary.Models;
    using Victop.Frame.CoreLibrary.MongoModel;
    using Victop.Frame.DataChannel.Enums;
    using Victop.Frame.PublicLib.Helpers;

    /// <summary>
    /// 数据创建器
    /// </summary>
    /// <remarks>数据创建管理器</remarks>
    public class DataCreateManager
    {
        /// <summary>
        /// 依据应答消息创建DataSet并存储到Hashtable
        /// </summary>
        private Hashtable CreateDataSetByReplyMessage(ReplyMessage replyMessageInfo, RequestMessage messageInfo)
        {
            Hashtable hashData = new Hashtable();
            ChannelData channelData = new ChannelData();
            channelData.MessageInfo = messageInfo;
            Dictionary<string, string> contDic = JsonHelper.ToObject<Dictionary<string, string>>(replyMessageInfo.ReplyContent);
            string JsonData = replyMessageInfo.ReplyContent;
            channelData.JSONData = JsonData;
            channelData.OriginalJsonData = JsonData;
            try
            {
                channelData.ModelDefInfo = JsonHelper.ReadJsonObject<MongoModelInfoModel>(JsonHelper.ReadJsonString(JsonData, "docDataStore"), "model");
                channelData.SimpleRefInfo = JsonHelper.ReadJsonObject<MongoSimpleRefInfoModel>(JsonHelper.ReadJsonString(JsonData, "docDataStore"), "simpleRef");
                channelData.DatapermString = JsonHelper.ReadJsonString(JsonData, "dataperm");
            }
            catch (Exception ex)
            {

            }
            hashData.Add("Data", channelData);
            return hashData;

        }

        private void CreateDataSet(DataSet fullDs, string keyName, string arrayListStr, string parentTableName, string parentValue)
        {
            bool dtFlag = false;
            DataTable newDt;
            if (!fullDs.Tables.Contains(keyName))
            {
                newDt = new DataTable(keyName);
                DataColumn dc = new DataColumn(parentTableName + "_id");
                dc.ReadOnly = true;
                newDt.Columns.Add(dc);
            }
            else
            {
                newDt = fullDs.Tables[keyName];
                dtFlag = true;
            }
            List<Dictionary<string, object>> arrayList = JsonHelper.ToObject<List<Dictionary<string, object>>>(JsonHelper.ReadJsonString(arrayListStr, "dataArray"));
            if (arrayList == null)
                return;
            #region 构建DataTable列
            List<string> colList = new List<string>();
            List<string> childList = new List<string>();
            for (int i = 0; i < arrayList.Count; i++)
            {
                foreach (string item in arrayList[i].Keys)
                {
                    if (!colList.Contains(item))
                    {
                        if (arrayList[i][item] != null && string.IsNullOrEmpty(JsonHelper.ReadJsonString(arrayList[i][item].ToString(), "dataArray")))
                        {
                            colList.Add(item);
                        }
                        else
                        {
                            childList.Add(item);
                        }
                    }
                }
            }
            if (colList.Count > 0)
            {
                foreach (string item in colList)
                {
                    if (!newDt.Columns.Contains(item))
                        newDt.Columns.Add(item);
                }
            }
            #endregion
            foreach (Dictionary<string, object> item in arrayList)
            {
                DataRow dr = newDt.NewRow();
                dr[parentTableName + "_id"] = parentValue;
                foreach (string keyItem in item.Keys)
                {
                    if (!childList.Contains(keyItem))
                    {
                        dr[keyItem] = item[keyItem];
                    }
                    else
                    {
                        if (item[keyItem] != null && string.IsNullOrEmpty(JsonHelper.ReadJsonString(item[keyItem].ToString(), "dataArray")))
                            CreateDataSet(fullDs, keyItem, item[keyItem].ToString(), newDt.TableName, item["_id"].ToString());
                    }
                }
                newDt.Rows.Add(dr);
            }
            if (dtFlag)
            {
                fullDs.Tables.Remove(keyName);
            }
            fullDs.Tables.Add(newDt);
        }

        /// <summary>
        /// 获取xml格式数据
        /// </summary>
        public virtual string GetCurdData(string channelId, bool masterFlag = true)
        {
            string curdStr = string.Empty;
            DataChannelManager dataManager = new DataChannelManager();
            Hashtable hashData = dataManager.GetData(channelId);
            ChannelData channelData = hashData["Data"] as ChannelData;
            curdStr = JsonHelper.ToJson(channelData.CrudJSONData);
            return curdStr;
        }

        /// <summary>
        /// 提交通道数据
        /// </summary>
        public virtual bool CommitChannelData(string channelId)
        {
            try
            {
                DataChannelManager dataManager = new DataChannelManager();
                Hashtable hashData = dataManager.GetData(channelId);
                ChannelData channelData = hashData["Data"] as ChannelData;
                channelData.CrudJSONData = new List<object>();
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        /// <summary>
        /// 发送应答消息(连接器使用)
        /// </summary>
        public virtual ReplyMessage SendReplyMessage(ReplyMessage replyMessageInfo, RequestMessage messageInfo)
        {
            Hashtable replyHashtable = CreateDataSetByReplyMessage(replyMessageInfo, messageInfo);
            DataChannelManager dataManager = new DataChannelManager();
            string DataChannelId = string.Empty;
            if (!dataManager.CheckDataExist(messageInfo, out DataChannelId))
            {
                DataChannelId = replyMessageInfo.MessageId;
            }
            if (dataManager.AddData(DataChannelId, replyHashtable))
            {
                replyMessageInfo.DataChannelId = DataChannelId;
                replyMessageInfo.ReplyContent = string.Empty;
            }
            return replyMessageInfo;
        }
    }
}

