//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.MessageManager
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading;
    using Victop.Frame.CoreLibrary.Enums;
    using Victop.Frame.CoreLibrary.Interfaces;
    using Victop.Frame.PublicLib.Helpers;

    /// <summary>
    /// 插件消息实现类【消息接收】
    /// </summary>
    /// <remarks>插件消息实现类</remarks>
    public class PluginMessage
    {
        /// <summary>
        /// 发送消息(JSON数据)
        /// </summary>
        /// <param name="objectId"></param>
        /// <param name="messageInfo"></param>
        /// <param name="replyCallBack"></param>
        /// <param name="validTime"></param>
        /// <param name="dataForm"></param>
        public virtual void SendMessage(string messageType, Dictionary<string, object> messageContent, WaitCallback replyCallBack,long validTime = 15)
        {
            PluginMessageFormManager pluginMessageFormManager = new PluginMessageFormManager();
            pluginMessageFormManager.CheckMessageFormat(messageType, messageContent, replyCallBack, validTime);
        }
        /// <summary>
        /// 执行插件回调
        /// </summary>
        /// <param name="replyMessageInfo"></param>
        public void GetReplyMessage(string replyMessageInfo)
        {
            try
            {
                string messageId = JsonHelper.ReadJsonString(replyMessageInfo, "MessageId");
                PluginMessageManager pluginMessageManager = new PluginMessageManager();
                Dictionary<string, PluginMessageInfo> pluginMessageList = pluginMessageManager.GetPluginMessageList();
                if (pluginMessageManager.CheckMessageIsExist(messageId))
                {
                    PluginMessageInfo messageInfo = pluginMessageList[messageId];
                    //移除消息池中的消息
                    pluginMessageManager.RemovePluginMessage(messageId);
                    if (messageInfo.MessageCallBack != null)
                    {
                        messageInfo.MessageCallBack(replyMessageInfo);
                    }

                }
            }
            catch (Exception ex)
            {
            }
        }
    }
}

