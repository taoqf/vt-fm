//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.MessageManager
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading;
    using Victop.Frame.CoreLibrary.Models;

    /// <summary>
    /// 插件消息管理 【请求消息池】
    /// </summary>
    /// <remarks>插件消息管理</remarks>
    public class PluginMessageManager
    {
        /// <summary>
        /// 插件消息集合
        /// </summary>
        private static Dictionary<string, PluginMessageInfo> PluginMessageList = new Dictionary<string, PluginMessageInfo>();
        /// <summary>
        /// 添加插件消息
        /// </summary>
        public virtual bool InsertPluginMessage(string messageKey, PluginMessageInfo messageInfo)
        {
            try
            {
                PluginMessageInfo pluginMessageInfo = PluginMessageList.Values.FirstOrDefault(it => it.CloudGalleryId == messageInfo.CloudGalleryId && it.ObjectId == messageInfo.ObjectId && it.MessageBody.MessageType == messageInfo.MessageBody.MessageType);
               if (pluginMessageInfo!=null)
                {
                    return false;
                }
                PluginMessageList.Add(messageKey, messageInfo);//插入消息队列
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }

        /// <summary>
        /// 移除失效插件消息
        /// </summary>
        public virtual bool RemovePluginMessage(string messageKey)
        {
            if (PluginMessageList.ContainsKey(messageKey))
            {
                lock (PluginMessageList)
                {
                    PluginMessageList.Remove(messageKey);
                }
                return true;
            }
            return false;
        }

        /// <summary>
        /// 判断插件消息有效性
        /// </summary>
        public virtual void CheckPluginMessageValid()
        {
            while (true)
            {
                PluginMessageInfo pluginMessageInfo = PluginMessageList.Values.FirstOrDefault(it => it.MessageEffectiveTime < DateTime.Now);
                if (pluginMessageInfo != null)
                {
                    //2.创建超时消息
                    ReplyMessage replyMessage = new ReplyMessage();//重新组织返回过来的超时消息
                    replyMessage.MessageId = pluginMessageInfo.MessageId;//设置对应的消息标识。
                    replyMessage.ReplyAlertMessage = "请求超时";
                    replyMessage.ReplyContent = "请求失败";
                    //3.组织返回消息串
                    ReplyPluginMessageManager replyPluginMessageManager = new ReplyPluginMessageManager();
                    replyPluginMessageManager.OrganizeReplyMessage(replyMessage);
                }
                Thread.Sleep(3000);
            }

        }

        /// <summary>
        /// 修改插件消息状态
        /// </summary>
        public virtual bool UpdatePluginMessageStatus(string messageKe)
        {
            return true;
        }

        /// <summary>
        /// 启动消息线程
        /// </summary>
        private void RunMessageThread()
        {
            throw new System.NotImplementedException(); //TODO:方法实现
        }

        /// <summary>
        /// 获取应答消息(回调)
        /// </summary>
        private void GetRequestMessage(ReplyMessage messageInfo)
        {
            throw new System.NotImplementedException(); //TODO:方法实现
        }
        /// <summary>
        /// 取得消息列表
        /// </summary>
        /// <returns></returns>
        public Dictionary<string, PluginMessageInfo> GetPluginMessageList()
        {
            return PluginMessageList;
        }
        /// <summary>
        /// 检查对应的消息是否存在。
        /// </summary>
        /// <returns></returns>
        public bool CheckMessageIsExist(string messageId)
        {
            if (PluginMessageList.Count > 0 )
            {
                if ( PluginMessageList.ContainsKey(messageId))
                {
                    return true;
                }
                
            }
            return false;
        }
    }
}

