//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.MessageManager
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading;
    using Victop.Frame.CoreLibrary.Models;
    using Victop.Frame.PublicLib.Helpers;

    /// <summary>
    /// 插件消息管理 【请求消息池】
    /// </summary>
    /// <remarks>插件消息管理</remarks>
    public class PluginMessageManager
    {
        /// <summary>
        /// 插件消息集合
        /// </summary>
        private static Dictionary<string, PluginMessageInfo> PluginMessageList = new Dictionary<string, PluginMessageInfo>();
        /// <summary>
        /// 添加插件消息
        /// </summary>
        public virtual bool InsertPluginMessage(string messageKey, PluginMessageInfo messageInfo)
        {
            try
            {
                string contentKey = GetMessageConentKey(messageInfo);
                foreach (PluginMessageInfo item in PluginMessageList.Values.Where(it => it.CloudGalleryId == messageInfo.CloudGalleryId && it.ObjectId == messageInfo.ObjectId && it.MessageBody.MessageType == messageInfo.MessageBody.MessageType))
                {
                    if (contentKey.Equals(GetMessageConentKey(item)))
                    {
                        return false;
                    }
                }
                PluginMessageList.Add(messageKey, messageInfo);//插入消息队列
                return true;
            }
            catch (Exception)
            {
                return false;
            }
        }
        /// <summary>
        /// 获取消息体的表示
        /// </summary>
        /// <param name="dataKey"></param>
        /// <param name="item"></param>
        /// <returns></returns>
        private string GetMessageConentKey(PluginMessageInfo item)
        {
            string dataKey = string.Empty;
            Dictionary<string, object> contentDic = JsonHelper.ToObject<Dictionary<string, object>>(item.MessageBody.MessageContent);
            if (contentDic.ContainsKey("modelId") && contentDic["modelId"] != null && !string.IsNullOrEmpty(contentDic["modelId"].ToString()))
            {
                dataKey = contentDic["modelId"].ToString();
            }
            else if (contentDic.ContainsKey("dataparam") && contentDic["dataparam"] != null && !string.IsNullOrEmpty(contentDic["dataparam"].ToString()))
            {
                dataKey = JsonHelper.ReadJsonString(contentDic["dataparam"].ToString(), "mastername");
            }
            return dataKey;
        }

        /// <summary>
        /// 移除失效插件消息
        /// </summary>
        public virtual bool RemovePluginMessage(string messageKey)
        {
            if (PluginMessageList.ContainsKey(messageKey))
            {
                lock (PluginMessageList)
                {
                    PluginMessageList.Remove(messageKey);
                }
                return true;
            }
            return false;
        }

        /// <summary>
        /// 判断插件消息有效性
        /// </summary>
        public virtual void CheckPluginMessageValid()
        {
            while (true)
            {
                if (PluginMessageList.Count > 0)
                {   
                    PluginMessageInfo pluginMessageInfo = PluginMessageList.Values.FirstOrDefault(it => it.MessageEffectiveTime < DateTime.Now);
                    if (pluginMessageInfo != null)
                    {
                        ReplyMessage replyMessage = new ReplyMessage();//重新组织返回过来的超时消息
                        replyMessage.MessageId = pluginMessageInfo.MessageId;//设置对应的消息标识。
                        replyMessage.ReplyAlertMessage = "请求超时";
                        replyMessage.ReplyContent = "请求失败";
                        ReplyPluginMessageManager replyPluginMessageManager = new ReplyPluginMessageManager();
                        replyPluginMessageManager.OrganizeReplyMessage(replyMessage);
                    }
                }
                Thread.Sleep(3000);
            }

        }
        /// <summary>
        /// 取得消息列表
        /// </summary>
        /// <returns></returns>
        public Dictionary<string, PluginMessageInfo> GetPluginMessageList()
        {
            return PluginMessageList;
        }
        /// <summary>
        /// 检查对应的消息是否存在。
        /// </summary>
        /// <returns></returns>
        public bool CheckMessageIsExist(string messageId)
        {
            if (PluginMessageList.Count > 0 )
            {
                if ( PluginMessageList.ContainsKey(messageId))
                {
                    return true;
                }
                
            }
            return false;
        }
    }
}

