//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.StandaloneAdapter
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Victop.Frame.CoreLibrary.AbsClasses;
    using Victop.Frame.CoreLibrary.Enums;
    using Victop.Frame.CoreLibrary.Interfaces;
    using Victop.Frame.CoreLibrary.Models;

	/// <summary>
	/// 消息管理器(丢弃)
    /// 离线模式时由服务管理中心决定，执行本地服务
	/// </summary>
    public class MessageManager : Base, IAdapter
    {
        #region Base实现
        public override bool Init()
        {
            return true;
        }

        public override void AutoRun()
        {
            //离线运行
            return;
        }

        public override void SynchDoMessage(IResponse response, RequestMessage message)
        {
            throw new NotImplementedException();
        }

        public override void AsyncDoMessage(RequestMessage message)
        {
            return;
        }

        public override void RejectedMessage(IResponse response, RequestMessage message)
        {
            return;
        }

        public override void OnExit(ExitTypeEnum exitType)
        {
            return;
        }
        #endregion
        #region IAdapter实现
        public CoreLibrary.Models.RequestMessage CreateMessage(MessageTargetEnum messageTarget)
        {
            throw new NotImplementedException();
        }

        public CoreLibrary.Models.RequestMessage CreateMessage(MessageTargetEnum messageTarget, string messageType)
        {
            throw new NotImplementedException();
        }

        public CoreLibrary.Models.RequestMessage CreateMessage(MessageTargetEnum messageTarget, string messageType, string messageControl, string messageContent)
        {
            throw new NotImplementedException();
        }

        public CoreLibrary.Models.RequestMessage GetMessage(string messageId)
        {
            throw new NotImplementedException();
        }

        public LinkedList<CoreLibrary.Models.RequestMessage> FindMessageList(string messageType)
        {
            throw new NotImplementedException();
        }

        public CoreLibrary.Models.ReplyMessage SubmitRequest(RequestMessage messageInfo)
        {
            throw new NotImplementedException();
        }

        public CoreLibrary.Models.ReplyMessage SubmitRequest(CoreLibrary.Models.RequestMessage messageInfo, long time)
        {
            throw new NotImplementedException();
        }

        public void StopAdapter()
        {
            throw new NotImplementedException();
        }
        #endregion
    }
}

