//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.Connection
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Victop.Frame.CoreLibrary;
    using Victop.Frame.CoreLibrary.Enums;
    using Victop.Frame.CoreLibrary.Models;
    using Victop.Frame.PublicLib.Helpers;
    using Victop.Frame.PublicLib.Managers;

    /// <summary>
    /// 消息组织管理
    /// </summary>
    public class MessageOrganizeManager
    {
        /// <summary>
        /// 组织返回消息
        /// </summary>
        /// <param name="messageInfo"></param>
        /// <returns></returns>
        public virtual RequestMessage OrganizeMessage(RequestMessage messageInfo, out DataOperateEnum replyIsToChannel)
        {
            replyIsToChannel = DataOperateEnum.NONE;
            #region 通道及用户相关
            GalleryManager galleryManager = new GalleryManager();
            CloudGalleryInfo cloudGallyInfo = galleryManager.GetGallery(GalleryManager.GetCurrentGalleryId().ToString());
            LoginUserInfoModel loginUserInfo = cloudGallyInfo.ClientInfo;
            #endregion
            if (cloudGallyInfo.IsLogin)
            {
                try
                {
                    Dictionary<string, object> dicContent = JsonHelper.ToObject<Dictionary<string, object>>(messageInfo.MessageContent);
                    bool opFlag = false;
                    if (CoreDataCollection.ClientMessageTypeList.NoneMessageType.Contains(messageInfo.MessageType))
                    {
                        opFlag = true;
                    }
                    if (!opFlag && CoreDataCollection.ClientMessageTypeList.SearchMessageType.Contains(messageInfo.MessageType))
                    {
                        dicContent = GetFindMongoTableDataMessage(dicContent);
                        replyIsToChannel = DataOperateEnum.SAVE;
                        opFlag = true;
                    }
                    if (!opFlag && CoreDataCollection.ClientMessageTypeList.SaveMessageType.Contains(messageInfo.MessageType))
                    {
                        dicContent = GetSaveMongoTableDataMessage(dicContent);
                        replyIsToChannel = DataOperateEnum.COMMIT;
                        opFlag = true;
                    }
                    else if (messageInfo.MessageType.Equals("taskScheduler"))
                    {
                        Dictionary<string, object> dicMessageControl = new Dictionary<string, object>();
                        dicMessageControl.Add("reply", 1);
                        messageInfo.MessageControl = JsonHelper.ToJson(dicMessageControl);
                        if (dicContent != null && dicContent.ContainsKey("runserver"))
                        {
                            dicContent["runserver"] = messageInfo.MessageId;
                        }
                    }
                    if (!dicContent.ContainsKey("spaceid"))
                    {
                        dicContent.Add("spaceid", cloudGallyInfo.ClientId);
                    }
                    if (dicContent != null && !dicContent.ContainsKey("usercode"))
                    {
                        dicContent.Add("usercode", loginUserInfo.UserCode);
                    }
                    messageInfo.MessageContent = JsonHelper.ToJson(dicContent);
                }
                catch (Exception)
                {
                    return messageInfo;
                }
            }
            else
            {
                replyIsToChannel = DataOperateEnum.CANNEL;
            }
            return messageInfo;
        }
        /// <summary>
        /// 查询Mongo数据
        /// </summary>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetFindMongoTableDataMessage(Dictionary<string, object> dicContent)
        {
            List<object> definition = new List<object>();
            definition.Add("tables");
            definition.Add("relation");
            definition.Add("clientRef");
            definition.Add("ref");
            if (dicContent.ContainsKey("modeldefinition"))
            {
                dicContent["modeldefinition"] = definition;
            }
            else
            {
                dicContent.Add("modeldefinition", definition);
            }
            return dicContent;
        }
        /// <summary>
        /// 保存mongo数据库表数据
        /// </summary>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetSaveMongoTableDataMessage(Dictionary<string, object> dicContent)
        {
            if (dicContent.ContainsKey("DataChannelId"))
            {
                string channelId = dicContent["DataChannelId"].ToString();
                ReplyMessageResolver replyResolver = new ReplyMessageResolver();
                string jsonData = replyResolver.GetCurdDataByDataChannelId(channelId, false);
                dicContent.Remove("DataChannelId");
                if (!dicContent.ContainsKey("crudlist"))
                {
                    dicContent.Add("crudlist", new List<object>());
                }
                if (!string.IsNullOrEmpty(jsonData))
                {
                    dicContent["crudlist"] = JsonHelper.ToObject<List<object>>(jsonData);
                }
            }
            return dicContent;
        }
    }
}

