//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.Connection
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Victop.Frame.CoreLibrary;
    using Victop.Frame.CoreLibrary.Enums;
    using Victop.Frame.CoreLibrary.Models;
    using Victop.Frame.PublicLib.Helpers;
    using Victop.Frame.PublicLib.Managers;

    /// <summary>
    /// 消息组织管理
    /// </summary>
    public class MessageOrganizeManager
    {
        /// <summary>
        /// 组织返回消息
        /// </summary>
        /// <param name="messageInfo"></param>
        /// <returns></returns>
        public virtual RequestMessage OrganizeMessage(RequestMessage messageInfo, DataFormEnum dataForm, out DataOperateEnum replyIsToChannel)
        {
            replyIsToChannel = DataOperateEnum.NONE;
            #region 通道及用户相关
            GalleryManager galleryManager = new GalleryManager();
            CloudGalleryInfo cloudGallyInfo = galleryManager.GetGallery(GalleryManager.GetCurrentGalleryId().ToString());
            LoginUserInfo loginUserInfo = cloudGallyInfo.ClientInfo;
            #endregion
            try
            {
                Dictionary<string, object> dicContent = JsonHelper.ToObject<Dictionary<string, object>>(messageInfo.MessageContent);
                bool opFlag = false;
                if (CoreDataCollection.ClientMessageTypeList.NoneMessageType.Contains(messageInfo.MessageType))
                {
                    opFlag = true;
                }
                if (!opFlag && CoreDataCollection.ClientMessageTypeList.SearchMessageType.Contains(messageInfo.MessageType))
                {
                    dicContent = GetFindMongoTableDataMessage(dicContent);
                    replyIsToChannel = DataOperateEnum.SAVE;
                    opFlag = true;
                }
                if (!opFlag && CoreDataCollection.ClientMessageTypeList.SaveMessageType.Contains(messageInfo.MessageType))
                {
                    dicContent = GetSaveMongoTableDataMessage(dicContent);
                    replyIsToChannel = DataOperateEnum.COMMIT;
                    opFlag = true;
                }
                if (!dicContent.ContainsKey("spaceId"))
                {
                    dicContent.Add("spaceId", string.Format("{0}::{1}", cloudGallyInfo.ClientId, cloudGallyInfo.ProductId));
                }
                messageInfo.MessageContent = JsonHelper.ToJson(dicContent);
            }
            catch (Exception)
            {
                return messageInfo;
            }
            return messageInfo;
        }

        /// <summary>
        /// 组织模型取数消息
        /// </summary>
        /// <remarks>DataChannelService.getFormBusiDataAsync</remarks>
        /// <param name="dicContent">消息内容</param>
        /// <returns></returns>
        private Dictionary<string, object> GetDataByModelMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("whereArr"))
                {
                    dicContent.Add("whereArr", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicContent.Add("dataparam", dicDataParam);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织模型保存消息
        /// </summary>
        /// <remarks>DataChannelService.saveBusiData</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> SaveDataByModelMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("DataChannelId"))
                {
                    dicContent.Add("deltaXml", null);
                }
                else
                {
                    string channelId = dicContent["DataChannelId"].ToString();
                    ReplyMessageResolver replyResolver = new ReplyMessageResolver();
                    string dataXml = replyResolver.GetDataXmlByDataChannelId(channelId, false);
                    if (dicContent.ContainsKey("deltaXml"))
                    {
                        dicContent["deltaXml"] = dataXml;
                    }
                    else
                    {
                        dicContent.Add("deltaXml", dataXml);
                    }
                    dicContent.Remove("DataChannelId");
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicContent.Add("dataparam", dicDataParam);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织主档数据(获取树型数据)消息
        /// </summary>
        /// <remarks>DataChannelService.getMasterPropDataAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetMasterPropDataMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicDataParam.Add("isdata", null);
                    dicDataParam.Add("mastername", null);
                    dicDataParam.Add("wheresql", null);
                    dicDataParam.Add("prooplist", null);
                    dicDataParam.Add("proplisted", null);
                    dicDataParam.Add("dataed", null);
                    dicDataParam.Add("pageno", null);
                    dicDataParam.Add("ispage", null);
                    dicDataParam.Add("getset", null);
                    dicContent.Add("dataparam", dicDataParam);
                }
                else
                {
                    Dictionary<string, object> dicDataParam = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["dataparam"].ToString());
                    if (!dicDataParam.ContainsKey("isdata"))
                    {
                        dicDataParam.Add("isdata", null);
                    }
                    if (!dicDataParam.ContainsKey("mastername"))
                    {
                        dicDataParam.Add("mastername", null);
                    }
                    if (!dicDataParam.ContainsKey("wheresql"))
                    {
                        dicDataParam.Add("wheresql", null);
                    }
                    if (!dicDataParam.ContainsKey("prooplist"))
                    {
                        dicDataParam.Add("prooplist", null);
                    }
                    if (!dicDataParam.ContainsKey("proplisted"))
                    {
                        dicDataParam.Add("proplisted", null);
                    }
                    if (!dicDataParam.ContainsKey("dataed"))
                    {
                        dicDataParam.Add("dataed", null);
                    }
                    if (!dicDataParam.ContainsKey("pageno"))
                    {
                        dicDataParam.Add("pageno", null);
                    }
                    if (!dicDataParam.ContainsKey("ispage"))
                    {
                        dicDataParam.Add("ispage", null);
                    }
                    if (!dicDataParam.ContainsKey("getset"))
                    {
                        dicDataParam.Add("getset", null);
                    }
                    dicContent["dataparam"] = dicDataParam;
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织主档保存消息
        /// </summary>
        /// <remarks>DataChannelService.getSaveMasterDataAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> SaveMasterPropDataMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("openType"))
                {
                    dicContent.Add("openType", null);
                }
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("reportID"))
                {
                    dicContent.Add("reportID", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("fieldName"))
                {
                    dicContent.Add("fieldName", null);
                }
                if (!dicContent.ContainsKey("masterOnly"))
                {
                    dicContent.Add("masterOnly", false);
                }

                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicDataParam.Add("mastername", null);
                    dicContent.Add("dataparam", dicDataParam);
                }
                else
                {
                    Dictionary<string, object> dicDataParam = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["dataparam"].ToString());
                    if (!dicDataParam.ContainsKey("mastername"))
                    {
                        dicDataParam.Add("mastername", null);
                    }
                    dicContent["dataparam"] = dicDataParam;
                }
                if (!dicContent.ContainsKey("whereArr"))
                {
                    dicContent.Add("whereArr", null);
                }
                if (!dicContent.ContainsKey("masterParam"))
                {
                    dicContent.Add("masterParam", null);
                }
                if (!dicContent.ContainsKey("DataChannelId"))
                {
                    dicContent.Add("deltaXml", null);
                }
                else
                {
                    string channelId = dicContent["DataChannelId"].ToString();
                    ReplyMessageResolver replyResolver = new ReplyMessageResolver();
                    string dataXml = replyResolver.GetDataXmlByDataChannelId(channelId);
                    if (dicContent.ContainsKey("deltaXml"))
                    {
                        dicContent["deltaXml"] = dataXml;
                    }
                    else
                    {
                        dicContent.Add("deltaXml", dataXml);
                    }
                    dicContent.Remove("DataChannelId");
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("shareFlag"))
                {
                    dicContent.Add("shareFlag", null);
                }
                if (!dicContent.ContainsKey("treeStr"))
                {
                    dicContent.Add("treeStr", null);
                }
                if (!dicContent.ContainsKey("saveType"))
                {
                    dicContent.Add("saveType", null);
                }
                if (!dicContent.ContainsKey("doccode"))
                {
                    dicContent.Add("doccode", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                return dicContent;
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织业务规则取数消息
        /// </summary>
        /// <remarks>DataChannelService.getBusinessRulesDataAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetBusinessRulesDataMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("whereArr"))
                {
                    dicContent.Add("whereArr", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicContent.Add("dataparam", dicDataParam);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织业务规则保存消息
        /// </summary>
        /// <remarks>DataChannelService.getSaveBusinessRulesDataAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> SaveBusinessRulesDataMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("openType"))
                {
                    dicContent.Add("openType", null);
                }
                if (!dicContent.ContainsKey("fieldName"))
                {
                    dicContent.Add("fieldName", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("reportID"))
                {
                    dicContent.Add("reportID", null);
                }
                if (!dicContent.ContainsKey("masterOnly"))
                {
                    dicContent.Add("masterOnly", false);
                }
                if (!dicContent.ContainsKey("whereArr"))
                {
                    dicContent.Add("whereArr", null);
                }
                if (!dicContent.ContainsKey("masterParam"))
                {
                    dicContent.Add("masterParam", null);
                }
                if (!dicContent.ContainsKey("shareFlag"))
                {
                    dicContent.Add("shareFlag", null);
                }
                if (!dicContent.ContainsKey("treeStr"))
                {
                    dicContent.Add("treeStr", null);
                }
                if (!dicContent.ContainsKey("saveType"))
                {
                    dicContent.Add("saveType", null);
                }
                if (!dicContent.ContainsKey("doccode"))
                {
                    dicContent.Add("doccode", null);
                }
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("DataChannelId"))
                {
                    dicContent.Add("deltaXml", null);
                }
                else
                {
                    string channelId = dicContent["DataChannelId"].ToString();
                    ReplyMessageResolver replyResolver = new ReplyMessageResolver();
                    string dataXml = replyResolver.GetDataXmlByDataChannelId(channelId, false);
                    if (dicContent.ContainsKey("deltaXml"))
                    {
                        dicContent["deltaXml"] = dataXml;
                    }
                    else
                    {
                        dicContent.Add("deltaXml", dataXml);
                    }
                    dicContent.Remove("DataChannelId");
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicContent.Add("dataparam", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织获取单号消息
        /// </summary>
        /// <remarks>DataChannelService.getDocCodeAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetDocCodeMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("openType"))
                {
                    dicContent.Add("openType", null);
                }
                if (!dicContent.ContainsKey("fieldName"))
                {
                    dicContent.Add("fieldName", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("reportID"))
                {
                    dicContent.Add("reportID", null);
                }
                if (!dicContent.ContainsKey("masterOnly"))
                {
                    dicContent.Add("masterOnly", false);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    dicContent.Add("dataparam", null);
                }
                else
                {
                    dicContent["dataparam"] = null;
                }
                if (!dicContent.ContainsKey("whereArr"))
                {
                    dicContent.Add("whereArr", null);
                }
                if (!dicContent.ContainsKey("masterParam"))
                {
                    dicContent.Add("masterParam", null);
                }
                if (!dicContent.ContainsKey("shareFlag"))
                {
                    dicContent.Add("shareFlag", null);
                }
                if (!dicContent.ContainsKey("treeStr"))
                {
                    dicContent.Add("treeStr", null);
                }
                if (!dicContent.ContainsKey("saveType"))
                {
                    dicContent.Add("saveType", null);
                }
                if (!dicContent.ContainsKey("doccode"))
                {
                    dicContent.Add("doccode", null);
                }
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("deltaXml"))
                {
                    dicContent.Add("deltaXml", null);
                }
                if (!dicContent.ContainsKey("key"))
                {
                    dicContent.Add("key", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织数据引用消息
        /// </summary>
        /// <remarks>DataChannelService.getFormReferenceSpecial</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetFormReferenceSpecialMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("fieldName"))
                {
                    dicContent.Add("fieldName", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicDataParam.Add("isdata", null);
                    dicDataParam.Add("mastername", null);
                    dicDataParam.Add("datasourcetype", null);
                    dicDataParam.Add("datasourcename", null);
                    dicDataParam.Add("pageno", null);
                    dicDataParam.Add("bsname", null);
                    dicDataParam.Add("bsgroupname", null);
                    dicDataParam.Add("isbs", null);
                    dicDataParam.Add("batchfieldlist", null);
                    dicContent.Add("dataparam", dicDataParam);
                }
                else
                {
                    Dictionary<string, object> dicDataParam = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["dataparam"].ToString());
                    if (!dicDataParam.ContainsKey("isdata"))
                    {
                        dicDataParam.Add("isdata", null);
                    }
                    if (!dicDataParam.ContainsKey("mastername"))
                    {
                        dicDataParam.Add("mastername", null);
                    }
                    if (!dicDataParam.ContainsKey("datasourcetype"))
                    {
                        dicDataParam.Add("datasourcetype", null);
                    }
                    if (!dicDataParam.ContainsKey("datasourcename"))
                    {
                        dicDataParam.Add("datasourcename", null);
                    }
                    if (!dicDataParam.ContainsKey("bsname"))
                    {
                        dicDataParam.Add("bsname", null);
                    }
                    if (!dicDataParam.ContainsKey("bsgroupname"))
                    {
                        dicDataParam.Add("bsgroupname", null);
                    }
                    if (!dicDataParam.ContainsKey("pageno"))
                    {
                        dicDataParam.Add("pageno", null);
                    }
                    if (!dicDataParam.ContainsKey("isbs"))
                    {
                        dicDataParam.Add("isbs", null);
                    }
                    if (!dicDataParam.ContainsKey("batchfieldlist"))
                    {
                        dicDataParam.Add("batchfieldlist", null);
                    }

                    dicContent["dataparam"] = dicDataParam;
                }
                if (!dicContent.ContainsKey("masterParam"))
                {
                    dicContent.Add("masterParam", new Dictionary<string, string>());
                }

                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织异步数据引用消息
        /// </summary>
        /// <remarks>DataChannelService.getFormReferenceDataAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetFormReferenceDataMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("fieldName"))
                {
                    dicContent.Add("fieldName", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicDataParam.Add("isdata", null);
                    dicDataParam.Add("mastername", null);
                    dicDataParam.Add("datasourcetype", null);
                    dicDataParam.Add("datasourcename", null);
                    dicDataParam.Add("pageno", null);
                    dicDataParam.Add("bsname", null);
                    dicDataParam.Add("bsgroupname", null);
                    dicDataParam.Add("isbs", null);
                    dicDataParam.Add("batchfieldlist", null);
                    dicContent.Add("dataparam", dicDataParam);
                }
                else
                {
                    Dictionary<string, object> dicDataParam = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["dataparam"].ToString());
                    if (!dicDataParam.ContainsKey("isdata"))
                    {
                        dicDataParam.Add("isdata", null);
                    }
                    if (!dicDataParam.ContainsKey("mastername"))
                    {
                        dicDataParam.Add("mastername", null);
                    }
                    if (!dicDataParam.ContainsKey("datasourcetype"))
                    {
                        dicDataParam.Add("datasourcetype", null);
                    }
                    if (!dicDataParam.ContainsKey("datasourcename"))
                    {
                        dicDataParam.Add("datasourcename", null);
                    }
                    if (!dicDataParam.ContainsKey("bsname"))
                    {
                        dicDataParam.Add("bsname", null);
                    }
                    if (!dicDataParam.ContainsKey("bsgroupname"))
                    {
                        dicDataParam.Add("bsgroupname", null);
                    }
                    if (!dicDataParam.ContainsKey("pageno"))
                    {
                        dicDataParam.Add("pageno", null);
                    }
                    if (!dicDataParam.ContainsKey("isbs"))
                    {
                        dicDataParam.Add("isbs", null);
                    }
                    if (!dicDataParam.ContainsKey("batchfieldlist"))
                    {
                        dicDataParam.Add("batchfieldlist", null);
                    }

                    dicContent["dataparam"] = dicDataParam;
                }
                if (!dicContent.ContainsKey("masterParam"))
                {
                    dicContent.Add("masterParam", new Dictionary<string, string>());
                }

                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 测试资料同步的
        /// </summary>
        /// <remarks>SynchronousMessageServer.getSynchronousMessageServer</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetSynchronousMessageServerMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    dicContent.Add("dataparam", new Dictionary<string, string>());
                }
                if (!dicContent.ContainsKey("DataChannelId"))
                {
                    dicContent.Add("DataChannelId", null);
                }
                else
                {
                    string channelId = dicContent["DataChannelId"].ToString();
                    ReplyMessageResolver replyResolver = new ReplyMessageResolver();
                    string dataXml = replyResolver.GetDataXmlByDataChannelId(channelId);
                    if (dicContent.ContainsKey("deltaXml"))
                    {
                        dicContent["deltaXml"] = dataXml;
                    }
                    else
                    {
                        dicContent.Add("deltaXml", dataXml);
                    }
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        ///  组织业务过账消息
        /// </summary>
        /// <remarks>TaskService.excute</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetDoEJBMessage(Dictionary<string, object> dicContent, RequestMessage messageInfo)
        {
            try
            {
                GalleryManager galleryManager = new GalleryManager();
                CloudGalleryInfo cloudGallyInfo = galleryManager.GetGallery(GalleryManager.GetCurrentGalleryId().ToString());
                LoginUserInfo loginUserInfo = cloudGallyInfo.ClientInfo;
                #region 处理消息体
                Dictionary<string, object> dicMessageControl = new Dictionary<string, object>();
                dicMessageControl.Add("sessionid", loginUserInfo.SessionId);
                dicMessageControl.Add("BusinessKey", dicContent.ContainsKey("DocCode") ? dicContent["DocCode"] : null);
                messageInfo.MessageControl = JsonHelper.ToJson(dicMessageControl);
                #endregion
                #region 处理Content
                Dictionary<string, object> result = new Dictionary<string, object>();
                result.Add("uuid", Guid.NewGuid().ToString());
                result.Add("priority", 10);
                result.Add("taskid", null);
                result.Add("usercode", loginUserInfo.UserCode);
                result.Add("runserver", messageInfo.MessageId);
                if (dicContent.ContainsKey("FlexObj") && dicContent["FlexObj"] != null)
                {
                    Dictionary<string, object> objDic = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["FlexObj"].ToString());
                    if (objDic != null && objDic.ContainsKey("tasktype"))
                    {
                        result.Add("tasktype", objDic["tasktype"]);
                    }
                    else
                    {
                        result.Add("tasktype", "业务过账");
                    }
                }
                else
                {
                    result.Add("tasktype", "业务过账");
                }
                result.Add("reply", 1);
                result.Add("stamp", null);
                result.Add("summary", null);
                result.Add("runbegintime", null);
                result.Add("runendtime", null);
                result.Add("taskstatus", null);
                result.Add("prioritycontrol", "取任务类型优先级");
                result.Add("replystatus", null);
                result.Add("replyresult", null);
                result.Add("jbossURL", null);
                Dictionary<string, object> runMessage = new Dictionary<string, object>();
                Dictionary<string, object> argValues = new Dictionary<string, object>();
                Dictionary<string, object> connectserver = new Dictionary<string, object>();
                connectserver.Add("reply", 0);
                runMessage.Add("methodName", "execute");
                runMessage.Add("ejbJNDIName", "过账总控EJB");
                List<string> listaryTypes = new List<string>();
                listaryTypes.Add("java.lang.String");
                runMessage.Add("argTypes", listaryTypes);
                runMessage.Add("reply", true);
                runMessage.Add("argBeans", null);
                runMessage.Add("jbossUrl", null);
                runMessage.Add("ejbInterfaceName", "com.victop.platform.core.ejb.postlogic.PostingLogic");
                argValues.Add("controlid", dicContent.ContainsKey("ControlId") ? dicContent["ControlId"] : null);
                argValues.Add("modelid", dicContent.ContainsKey("ModelId") ? dicContent["ModelId"] : null);
                argValues.Add("clientid", cloudGallyInfo.ClientId);
                argValues.Add("doccode", dicContent.ContainsKey("DocCode") ? dicContent["DocCode"] : null);
                Dictionary<string, string> dataparam = new Dictionary<string, string>();
                dataparam.Add("companyid", null);
                dataparam.Add("username", loginUserInfo.UserName);
                dataparam.Add("usercode", loginUserInfo.UserCode);
                dataparam.Add("prdoccode", "1");
                dataparam.Add("accountsid", "getMasterName()");
                dataparam.Add("acSystemId", dicContent.ContainsKey("acSystemId") ? Convert.ToString(dicContent["acSystemId"]) : null);
                argValues.Add("dataparam", dataparam);
                argValues.Add("reportcasejson", null);
                argValues.Add("runuser", loginUserInfo.UserCode);
                argValues.Add("formid", dicContent.ContainsKey("FormId") ? dicContent["FormId"] : null);
                argValues.Add("systemid", dicContent.ContainsKey("SystemId") ? dicContent["SystemId"] : null);
                argValues.Add("opentype", null);
                argValues.Add("datasetid", null);
                argValues.Add("tableid", null);
                argValues.Add("reportid", null);
                argValues.Add("fieldname", null);
                argValues.Add("masteronly", false);
                argValues.Add("wherearr", null);
                argValues.Add("masterparam", null);
                argValues.Add("delta", null);
                argValues.Add("treestr", null);
                argValues.Add("savetype", null);
                argValues.Add("shareflag", null);
                argValues.Add("detail", null);
                argValues.Add("modeltype", null);
                argValues.Add("formattype", null);
                argValues.Add("ispage", 0);
                argValues.Add("pageno", -1);
                argValues.Add("pagesize", 10);
                List<string> list = new List<string>();
                list.Add(JsonHelper.ToJson(argValues));
                runMessage.Add("argValues", list);
                result.Add("connectserver", JsonHelper.ToJson(connectserver));
                result.Add("runMessage", JsonHelper.ToJson(runMessage));
                #endregion
                return result;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织执行sql消息(丢弃)
        /// </summary>
        /// <remarks>DataService.execSQLAsyn</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetExecSQLMessage(Dictionary<string, object> dicContent)
        {
            return dicContent;
        }
        /// <summary>
        /// 组织根据sql得到数据消息（丢弃）
        /// </summary>
        /// <remarks>DataService.getDataBySql</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetDataBySqlMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("openType"))
                {
                    dicContent.Add("openType", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("reportID"))
                {
                    dicContent.Add("reportID", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("fieldName"))
                {
                    dicContent.Add("fieldName", null);
                }
                if (!dicContent.ContainsKey("masterOnly"))
                {
                    dicContent.Add("masterOnly", null);
                }
                if (!dicContent.ContainsKey("whereArr"))
                {
                    dicContent.Add("whereArr", null);
                }
                if (!dicContent.ContainsKey("masterParam"))
                {
                    dicContent.Add("masterParam", null);
                }
                if (!dicContent.ContainsKey("deltaXml"))
                {
                    dicContent.Add("deltaXml", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("shareFlag"))
                {
                    dicContent.Add("shareFlag", null);
                }
                if (!dicContent.ContainsKey("treeStr"))
                {
                    dicContent.Add("treeStr", null);
                }
                if (!dicContent.ContainsKey("saveType"))
                {
                    dicContent.Add("saveType", null);
                }
                if (!dicContent.ContainsKey("doccode"))
                {
                    dicContent.Add("doccode", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicDataParam.Add("isdata", null);
                    dicDataParam.Add("mastername", null);
                    dicDataParam.Add("wheresql", null);
                    dicDataParam.Add("prooplist", null);
                    dicDataParam.Add("proplisted", null);
                    dicDataParam.Add("dataed", null);
                    dicDataParam.Add("pageno", null);
                    dicDataParam.Add("ispage", null);
                    dicDataParam.Add("getset", null);
                    dicContent.Add("dataparam", dicDataParam);
                }
                else
                {
                    Dictionary<string, object> dicDataParam = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["dataparam"].ToString());
                    if (!dicDataParam.ContainsKey("isdata"))
                    {
                        dicDataParam.Add("isdata", null);
                    }
                    if (!dicDataParam.ContainsKey("mastername"))
                    {
                        dicDataParam.Add("mastername", null);
                    }
                    if (!dicDataParam.ContainsKey("wheresql"))
                    {
                        dicDataParam.Add("wheresql", null);
                    }
                    if (!dicDataParam.ContainsKey("prooplist"))
                    {
                        dicDataParam.Add("prooplist", null);
                    }
                    if (!dicDataParam.ContainsKey("proplisted"))
                    {
                        dicDataParam.Add("proplisted", null);
                    }
                    if (!dicDataParam.ContainsKey("dataed"))
                    {
                        dicDataParam.Add("dataed", null);
                    }
                    if (!dicDataParam.ContainsKey("pageno"))
                    {
                        dicDataParam.Add("pageno", null);
                    }
                    if (!dicDataParam.ContainsKey("ispage"))
                    {
                        dicDataParam.Add("ispage", null);
                    }
                    if (!dicDataParam.ContainsKey("getset"))
                    {
                        dicDataParam.Add("getset", null);
                    }
                    dicContent["dataparam"] = dicDataParam;
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织主档树消息
        /// </summary>
        /// <remarks>DataChannelService.getFilterMasterTree</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetFilterMasterTreeMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("systemid"))
                {
                    dicContent.Add("systemid", null);
                }
                if (!dicContent.ContainsKey("masterName"))
                {
                    dicContent.Add("masterName", null);
                }
                if (!dicContent.ContainsKey("currentRow"))
                {
                    dicContent.Add("currentRow", null);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织执行异步消息
        /// </summary>
        /// <remarks>BizDataService.executeAsyn</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetExecuteAsynMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("controlid"))
                {
                    dicContent.Add("controlid", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    dicContent["dataparam"] = null;
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 获取mongo数据库自定义服务
        /// </summary>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetMongoExecuteAsynMessage(Dictionary<string, object> dicContent)
        {
            if (!dicContent.ContainsKey("controlid"))
            {
                dicContent.Add("controlid", null);
            }
            return dicContent;
        }
        /// <summary>
        /// 得到服务时间
        /// </summary>
        /// <remarks>LinkBaseService.getServerDateTime</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetServerDateTimeMessage(Dictionary<string, object> dicContent)
        {
            return dicContent;
        }
        /// <summary>
        /// 通用数据请求
        /// </summary>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetLoadDataByModelMessage(Dictionary<string, object> dicContent)
        {
            OrginaizeCommonParam(dicContent);
            if (!dicContent.ContainsKey("deltaXml"))
            {
                dicContent.Add("deltaXml", null);
            }
            else
            {
                try
                {
                    List<Dictionary<string, object>> deltaList = JsonHelper.ToObject<List<Dictionary<string, object>>>(dicContent["deltaXml"].ToString());
                    foreach (Dictionary<string, object> item in deltaList)
                    {
                        if (!item.ContainsKey("modeltype"))
                        {
                            item.Add("modeltype", null);
                        }
                        if (!item.ContainsKey("modelid"))
                        {
                            item.Add("modelid", null);
                        }
                        if (!item.ContainsKey("systemid"))
                        {
                            item.Add("systemid", null);
                        }
                        if (!item.ContainsKey("formid"))
                        {
                            item.Add("formid", null);
                        }
                        if (!item.ContainsKey("tableid"))
                        {
                            item.Add("tableid", null);
                        }
                        if (!item.ContainsKey("formattype"))
                        {
                            item.Add("formattype", null);
                        }
                        if (!item.ContainsKey("ispage"))
                        {
                            item.Add("ispage", 1);
                        }
                        if (!item.ContainsKey("pageno"))
                        {
                            item.Add("pageno", -1);
                        }
                        if (!item.ContainsKey("pagesize"))
                        {
                            item.Add("pagesize", 10);
                        }
                        if (!item.ContainsKey("wherearr"))
                        {
                            item.Add("wherearr", null);
                        }
                        if (!item.ContainsKey("dataparam"))
                        {
                            item.Add("dataparam", null);
                        }
                        if (!item.ContainsKey("doccode"))
                        {
                            item.Add("doccode", null);
                        }
                        if (!item.ContainsKey("controlid"))
                        {
                            item.Add("controlid", null);
                        }
                        if (!item.ContainsKey("detail"))
                        {
                            item.Add("dataparam", "data,meta");
                        }
                    }
                }
                catch (Exception ex)
                {

                }
            }
            return dicContent;
        }
        /// <summary>
        /// 组织通用消息体参数
        /// </summary>
        /// <param name="dicContent"></param>
        private static void OrginaizeCommonParam(Dictionary<string, object> dicContent)
        {
            if (!dicContent.ContainsKey("openType"))
            {
                dicContent.Add("openType", null);
            }
            if (!dicContent.ContainsKey("bzsystemid"))
            {
                dicContent.Add("bzsystemid", null);
            }
            if (!dicContent.ContainsKey("formid"))
            {
                dicContent.Add("formid", null);
            }
            if (!dicContent.ContainsKey("dataSetID"))
            {
                dicContent.Add("dataSetID", null);
            }
            if (!dicContent.ContainsKey("reportID"))
            {
                dicContent.Add("reportID", null);
            }
            if (!dicContent.ContainsKey("modelId"))
            {
                dicContent.Add("modelId", null);
            }
            if (!dicContent.ContainsKey("fieldName"))
            {
                dicContent.Add("fieldName", null);
            }
            if (!dicContent.ContainsKey("masterOnly"))
            {
                dicContent.Add("masterOnly", false);
            }
            if (!dicContent.ContainsKey("dataparam"))
            {
                dicContent.Add("dataparam", null);
            }
            if (!dicContent.ContainsKey("whereArr"))
            {
                dicContent.Add("whereArr", null);
            }
            if (!dicContent.ContainsKey("masterParam"))
            {
                dicContent.Add("masterParam", null);
            }
            if (!dicContent.ContainsKey("shareFlag"))
            {
                dicContent.Add("shareFlag", false);
            }
            if (!dicContent.ContainsKey("treeStr"))
            {
                dicContent.Add("treeStr", null);
            }
            if (!dicContent.ContainsKey("saveType"))
            {
                dicContent.Add("saveType", null);
            }
            if (!dicContent.ContainsKey("doccode"))
            {
                dicContent.Add("doccode", null);
            }
        }
        /// <summary>
        /// 通用数据保存
        /// </summary>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetSaveDataByModelMessage(Dictionary<string, object> dicContent)
        {
            OrginaizeCommonParam(dicContent);
            if (!dicContent.ContainsKey("deltaXml"))
            {
                dicContent.Add("deltaXml", null);
            }
            GalleryManager galleryManager = new GalleryManager();
            CloudGalleryInfo cloudGallyInfo = galleryManager.GetGallery(GalleryManager.GetCurrentGalleryId().ToString());
            Dictionary<string, object> deltaDic;
            if (dicContent["deltaXml"] == null)
                deltaDic = new Dictionary<string, object>();
            else
                deltaDic = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["deltaXml"].ToString());
            if (!deltaDic.ContainsKey("clientid"))
            {
                deltaDic.Add("clientid", cloudGallyInfo.ClientId);
            }
            if (!deltaDic.ContainsKey("runuser"))
            {
                deltaDic.Add("runuser", cloudGallyInfo.ClientInfo.UserCode);
            }
            if (!deltaDic.ContainsKey("datalist"))
            {
                deltaDic.Add("datalist", null);
                List<object> DataList = new List<object>();
                Dictionary<string, object> listDic = new Dictionary<string, object>();
                listDic.Add("modelType", dicContent["modelType"]);
                listDic.Add("modelID", dicContent["modelId"]);
                listDic.Add("tableid", "");
                listDic.Add("systemid", dicContent["bysystemid"]);
                listDic.Add("formid", dicContent["formid"]);
                listDic.Add("controlid", dicContent["controlid"]);
                Dictionary<string, object> dataDic = new Dictionary<string, object>();
                if (dicContent.ContainsKey("DataChannelId"))
                {
                    string channelId = dicContent["DataChannelId"].ToString();
                    ReplyMessageResolver replyResolver = new ReplyMessageResolver();
                    List<object> dataJson = replyResolver.GetDataJSONByDataChannelId(channelId);
                    dataDic.Add("datarows", dataJson);
                }
                listDic.Add("delta", dataDic);
                DataList.Add(listDic);
                deltaDic["datalist"] = DataList;
                dicContent.Remove("DataChannelId");
                dicContent.Remove("modelType");
                dicContent["deltaXml"] = deltaDic;
            }
            return dicContent;
        }
        /// <summary>
        /// 查询Mongo数据
        /// </summary>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetFindMongoTableDataMessage(Dictionary<string, object> dicContent)
        {
            List<object> definition = new List<object>();
            definition.Add("tables");
            definition.Add("relation");
            definition.Add("clientRef");
            definition.Add("ref");
            if (dicContent.ContainsKey("modeldefinition"))
            {
                dicContent["modeldefinition"] = definition;
            }
            else
            {
                dicContent.Add("modeldefinition", definition);
            }
            return dicContent;
        }
        /// <summary>
        /// 保存mongo数据库表数据
        /// </summary>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetSaveMongoTableDataMessage(Dictionary<string, object> dicContent)
        {
            if (dicContent.ContainsKey("DataChannelId"))
            {
                string channelId = dicContent["DataChannelId"].ToString();
                ReplyMessageResolver replyResolver = new ReplyMessageResolver();
                string dataXml = replyResolver.GetDataXmlByDataChannelId(channelId, false);
                dicContent.Remove("DataChannelId");
                if (!dicContent.ContainsKey("crudlist"))
                {
                    dicContent.Add("crudlist", new List<object>());
                }
                if (!string.IsNullOrEmpty(dataXml))
                {
                    dicContent["crudlist"] = JsonHelper.ToObject<List<object>>(dataXml);
                }
            }
            return dicContent;
        }
    }
}

