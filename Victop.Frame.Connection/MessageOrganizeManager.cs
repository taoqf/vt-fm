//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.Connection
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Victop.Frame.CoreLibrary;
    using Victop.Frame.CoreLibrary.Enums;
    using Victop.Frame.CoreLibrary.Models;
    using Victop.Frame.PublicLib.Helpers;
    using Victop.Frame.PublicLib.Managers;

    /// <summary>
    /// 消息组织管理
    /// </summary>
    public class MessageOrganizeManager
    {
        /// <summary>
        /// 组织返回消息
        /// </summary>
        /// <param name="messageInfo"></param>
        /// <returns></returns>
        public virtual RequestMessage OrganizeMessage(RequestMessage messageInfo, out DataOperateEnum replyIsToChannel)
        {
            replyIsToChannel = DataOperateEnum.NONE;
            try
            {
                Dictionary<string, object> dicContent = JsonHelper.ToObject<Dictionary<string, object>>(messageInfo.MessageContent);
                switch (messageInfo.MessageType)
                {
                    case "DataChannelService.getFormBusiDataAsync":
                        dicContent = GetDataByModelMessage(dicContent);
                        replyIsToChannel = DataOperateEnum.SAVE;
                        break;
                    case "DataChannelService.saveBusiData":
                        dicContent = SaveDataByModelMessage(dicContent);
                        replyIsToChannel = DataOperateEnum.COMMIT;
                        break;
                    case "DataChannelService.getMasterPropDataAsync":
                        dicContent = GetMasterPropDataMessage(dicContent);
                        replyIsToChannel = DataOperateEnum.SAVE;
                        break;
                    case "DataChannelService.getSaveMasterDataAsync":
                        dicContent = SaveMasterPropDataMessage(dicContent);
                        replyIsToChannel = DataOperateEnum.COMMIT;
                        break;
                    case "DataChannelService.getBusinessRulesDataAsync":
                        dicContent = GetBusinessRulesDataMessage(dicContent);
                        replyIsToChannel = DataOperateEnum.SAVE;
                        break;
                    case "DataChannelService.getSaveBusinessRulesDataAsync":
                        dicContent = SaveBusinessRulesDataMessage(dicContent);
                        replyIsToChannel = DataOperateEnum.COMMIT;
                        break;
                    case "DataChannelService.getDocCodeAsync":
                        dicContent = GetDocCodeMessage(dicContent);
                        break;
                    case "DataChannelService.getFormReferenceSpecial":
                        dicContent = GetFormReferenceSpecialMessage(dicContent);
                        break;
                    case "DataChannelService.getFormReferenceDataAsync":
                        dicContent = GetFormReferenceDataMessage(dicContent);
                        break;
                    case "SynchronousMessageServer.getSynchronousMessageServer":
                        dicContent = GetSynchronousMessageServerMessage(dicContent);
                        break;
                    case "TaskService.excute":
                        dicContent = GetDoEJBMessage(dicContent);
                        break;
                    case "DataService.execSQLAsyn":
                        dicContent = GetExecSQLMessage(dicContent);
                        break;
                    case "DataService.getDataBySql":
                        dicContent = GetDataBySqlMessage(dicContent);
                        break;
                    case "DataChannelService.getFilterMasterTree":
                        dicContent = GetFilterMasterTreeMessage(dicContent);
                        break;
                    case "BizDataService.executeAsyn":
                        dicContent = GetExecuteAsynMessage(dicContent);
                        break;
                    case "LinkBaseService.getServerDateTime":
                        dicContent = GetServerDateTimeMessage(dicContent);
                        break;
                    default:
                        break;
                }

                if (dicContent.ContainsKey("runUser"))
                {
                    GalleryManager galleryManager = new GalleryManager();
                    CloudGalleryInfo cloudGallyInfo = galleryManager.GetGallery(GalleryManager.GetCurrentGalleryId().ToString());
                    LoginUserInfo loginUserInfo = cloudGallyInfo.ClientInfo;
                    dicContent["runUser"] = loginUserInfo.UserCode;
                }
                if (dicContent.ContainsKey("clientId"))
                {
                    string clientId = ConfigManager.GetAttributeOfNodeByName("UserInfo", "ClientId");
                    dicContent["clientId"] = clientId;
                }
                messageInfo.MessageContent = JsonHelper.ToJson(dicContent);
            }
            catch (Exception)
            {
                return messageInfo;
            }
            return messageInfo;
        }

        /// <summary>
        /// 组织模型取数消息
        /// </summary>
        /// <remarks>DataChannelService.getFormBusiDataAsync</remarks>
        /// <param name="messageInfo"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetDataByModelMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("whereArr"))
                {
                    dicContent.Add("whereArr", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicContent.Add("dataparam", dicDataParam);
                }
                //if (!dicContent.ContainsKey("mastername"))
                //{
                //    dicContent.Add("mastername", null);
                //}
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织模型保存消息
        /// </summary>
        /// <remarks>DataChannelService.saveBusiData</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> SaveDataByModelMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("DataChannelId"))
                {
                    dicContent.Add("DataChannelId", null);
                }
                else
                {
                    string channelId = dicContent["DataChannelId"].ToString();
                    ReplyMessageResolver replyResolver = new ReplyMessageResolver();
                    string dataXml = replyResolver.GetDataXmlByDataChannelId(channelId);
                    if (dicContent.ContainsKey("deltaXml"))
                    {
                        dicContent["deltaXml"] = dataXml;
                    }
                    else
                    {
                        dicContent.Add("deltaXml", dataXml);
                    }
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicContent.Add("dataparam", dicDataParam);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织主档数据(获取树型数据)消息
        /// </summary>
        /// <remarks>DataChannelService.getMasterPropDataAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetMasterPropDataMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicDataParam.Add("isdata", null);
                    dicDataParam.Add("mastername", null);
                    dicDataParam.Add("wheresql", null);
                    dicDataParam.Add("prooplist", null);
                    dicDataParam.Add("proplisted", null);
                    dicDataParam.Add("dataed", null);
                    dicDataParam.Add("pageno", null);
                    dicDataParam.Add("ispage", null);
                    dicDataParam.Add("getset", null);
                    dicContent.Add("dataparam", dicDataParam);
                }
                else
                {
                    Dictionary<string, object> dicDataParam = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["dataparam"].ToString());
                    if (!dicDataParam.ContainsKey("isdata"))
                    {
                        dicDataParam.Add("isdata", null);
                    }
                    if (!dicDataParam.ContainsKey("mastername"))
                    {
                        dicDataParam.Add("mastername", null);
                    }
                    if (!dicDataParam.ContainsKey("wheresql"))
                    {
                        dicDataParam.Add("wheresql", null);
                    }
                    if (!dicDataParam.ContainsKey("prooplist"))
                    {
                        dicDataParam.Add("prooplist", null);
                    }
                    if (!dicDataParam.ContainsKey("proplisted"))
                    {
                        dicDataParam.Add("proplisted", null);
                    }
                    if (!dicDataParam.ContainsKey("dataed"))
                    {
                        dicDataParam.Add("dataed", null);
                    }
                    if (!dicDataParam.ContainsKey("pageno"))
                    {
                        dicDataParam.Add("pageno", null);
                    }
                    if (!dicDataParam.ContainsKey("ispage"))
                    {
                        dicDataParam.Add("ispage", null);
                    }
                    if (!dicDataParam.ContainsKey("getset"))
                    {
                        dicDataParam.Add("getset", null);
                    }
                    dicContent["dataparam"] = dicDataParam;
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织主档保存消息
        /// </summary>
        /// <remarks>DataChannelService.getSaveMasterDataAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> SaveMasterPropDataMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("openType"))
                {
                    dicContent.Add("openType", null);
                }
                if(!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("reportID"))
                {
                    dicContent.Add("reportID", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("fieldName"))
                {
                    dicContent.Add("fieldName", null);
                }
                if (!dicContent.ContainsKey("masterOnly"))
                {
                    dicContent.Add("masterOnly", false);
                }

                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicDataParam.Add("mastername", null);
                    dicContent.Add("dataparam", dicDataParam);
                }
                else
                {
                    Dictionary<string, object> dicDataParam = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["dataparam"].ToString());
                    if (!dicDataParam.ContainsKey("mastername"))
                    {
                        dicDataParam.Add("mastername", null);
                    }
                    dicContent["dataparam"] = dicDataParam;
                }
                if (!dicContent.ContainsKey("whereArr"))
                {
                    dicContent.Add("whereArr", null);
                }
                if (!dicContent.ContainsKey("masterParam"))
                {
                    dicContent.Add("masterParam", null);
                }
                if (!dicContent.ContainsKey("DataChannelId"))
                {
                    dicContent.Add("deltaXml", null);
                }
                else
                {
                    string channelId = dicContent["DataChannelId"].ToString();
                    ReplyMessageResolver replyResolver = new ReplyMessageResolver();
                    string dataXml = replyResolver.GetDataXmlByDataChannelId(channelId);
                    if (dicContent.ContainsKey("deltaXml"))
                    {
                        dicContent["deltaXml"] = dataXml;
                    }
                    else
                    {
                        dicContent.Add("deltaXml", dataXml);
                    }
                    dicContent.Remove("DataChannelId");
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("shareFlag"))
                {
                    dicContent.Add("shareFlag", null);
                }
                if (!dicContent.ContainsKey("treeStr"))
                {
                    dicContent.Add("treeStr", null);
                }
                if (!dicContent.ContainsKey("saveType"))
                {
                    dicContent.Add("saveType", null);
                }
                if (!dicContent.ContainsKey("doccode"))
                {
                    dicContent.Add("doccode", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                return dicContent;
            }
            catch (Exception ex)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织业务规则取数消息
        /// </summary>
        /// <remarks>DataChannelService.getBusinessRulesDataAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetBusinessRulesDataMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("whereArr"))
                {
                    dicContent.Add("whereArr", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicContent.Add("dataparam", dicDataParam);
                }
                if (!dicContent.ContainsKey("mastername"))
                {
                    dicContent.Add("mastername", null);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织业务规则保存消息
        /// </summary>
        /// <remarks>DataChannelService.getSaveBusinessRulesDataAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> SaveBusinessRulesDataMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("DataChannelId"))
                {
                    dicContent.Add("DataChannelId", null);
                }
                else
                {
                    string channelId = dicContent["DataChannelId"].ToString();
                    ReplyMessageResolver replyResolver = new ReplyMessageResolver();
                    string dataXml = replyResolver.GetDataXmlByDataChannelId(channelId);
                    if (dicContent.ContainsKey("deltaXml"))
                    {
                        dicContent["deltaXml"] = dataXml;
                    }
                    else
                    {
                        dicContent.Add("deltaXml", dataXml);
                    }
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicContent.Add("dataparam", dicDataParam);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织获取单号消息
        /// </summary>
        /// <remarks>DataChannelService.getDocCodeAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetDocCodeMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("key"))
                {
                    dicContent.Add("key", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织数据引用消息
        /// </summary>
        /// <remarks>DataChannelService.getFormReferenceSpecial</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetFormReferenceSpecialMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("fieldName"))
                {
                    dicContent.Add("fieldName", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicDataParam.Add("isdata", null);
                    dicDataParam.Add("mastername", null);
                    dicDataParam.Add("datasourcetype", null);
                    dicDataParam.Add("datasourcename", null);
                    dicDataParam.Add("pageno", null);
                    dicDataParam.Add("bsname", null);
                    dicDataParam.Add("bsgroupname", null);
                    dicDataParam.Add("isbs", null);
                    dicDataParam.Add("batchfieldlist", null);
                    dicContent.Add("dataparam", dicDataParam);
                }
                else
                {
                    Dictionary<string, object> dicDataParam = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["dataparam"].ToString());
                    if (!dicDataParam.ContainsKey("isdata"))
                    {
                        dicDataParam.Add("isdata", null);
                    }
                    if (!dicDataParam.ContainsKey("mastername"))
                    {
                        dicDataParam.Add("mastername", null);
                    }
                    if (!dicDataParam.ContainsKey("datasourcetype"))
                    {
                        dicDataParam.Add("datasourcetype", null);
                    }
                    if (!dicDataParam.ContainsKey("datasourcename"))
                    {
                        dicDataParam.Add("datasourcename", null);
                    }
                    if (!dicDataParam.ContainsKey("bsname"))
                    {
                        dicDataParam.Add("bsname", null);
                    }
                    if (!dicDataParam.ContainsKey("bsgroupname"))
                    {
                        dicDataParam.Add("bsgroupname", null);
                    }
                    if (!dicDataParam.ContainsKey("pageno"))
                    {
                        dicDataParam.Add("pageno", null);
                    }
                    if (!dicDataParam.ContainsKey("isbs"))
                    {
                        dicDataParam.Add("isbs", null);
                    }
                    if (!dicDataParam.ContainsKey("batchfieldlist"))
                    {
                        dicDataParam.Add("batchfieldlist", null);
                    }

                    dicContent["dataparam"] = dicDataParam;
                }
                if (!dicContent.ContainsKey("masterParam"))
                {
                    dicContent.Add("masterParam", new Dictionary<string, string>());
                }
                
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织异步数据引用消息
        /// </summary>
        /// <remarks>DataChannelService.getFormReferenceDataAsync</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetFormReferenceDataMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("fieldName"))
                {
                    dicContent.Add("fieldName", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicDataParam.Add("isdata", null);
                    dicDataParam.Add("mastername", null);
                    dicDataParam.Add("datasourcetype", null);
                    dicDataParam.Add("datasourcename", null);
                    dicDataParam.Add("pageno", null);
                    dicDataParam.Add("bsname", null);
                    dicDataParam.Add("bsgroupname", null);
                    dicDataParam.Add("isbs", null);
                    dicDataParam.Add("batchfieldlist", null);
                    dicContent.Add("dataparam", dicDataParam);
                }
                else
                {
                    Dictionary<string, object> dicDataParam = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["dataparam"].ToString());
                    if (!dicDataParam.ContainsKey("isdata"))
                    {
                        dicDataParam.Add("isdata", null);
                    }
                    if (!dicDataParam.ContainsKey("mastername"))
                    {
                        dicDataParam.Add("mastername", null);
                    }
                    if (!dicDataParam.ContainsKey("datasourcetype"))
                    {
                        dicDataParam.Add("datasourcetype", null);
                    }
                    if (!dicDataParam.ContainsKey("datasourcename"))
                    {
                        dicDataParam.Add("datasourcename", null);
                    }
                    if (!dicDataParam.ContainsKey("bsname"))
                    {
                        dicDataParam.Add("bsname", null);
                    }
                    if (!dicDataParam.ContainsKey("bsgroupname"))
                    {
                        dicDataParam.Add("bsgroupname", null);
                    }
                    if (!dicDataParam.ContainsKey("pageno"))
                    {
                        dicDataParam.Add("pageno", null);
                    }
                    if (!dicDataParam.ContainsKey("isbs"))
                    {
                        dicDataParam.Add("isbs", null);
                    }
                    if (!dicDataParam.ContainsKey("batchfieldlist"))
                    {
                        dicDataParam.Add("batchfieldlist", null);
                    }

                    dicContent["dataparam"] = dicDataParam;
                }
                if (!dicContent.ContainsKey("masterParam"))
                {
                    dicContent.Add("masterParam", new Dictionary<string, string>());
                }

                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 测试资料同步的
        /// </summary>
        /// <remarks>SynchronousMessageServer.getSynchronousMessageServer</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetSynchronousMessageServerMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    dicContent.Add("dataparam", new Dictionary<string,string>());
                }
                if (!dicContent.ContainsKey("DataChannelId"))
                {
                    dicContent.Add("DataChannelId", null);
                }
                else
                {
                    string channelId = dicContent["DataChannelId"].ToString();
                    ReplyMessageResolver replyResolver = new ReplyMessageResolver();
                    string dataXml = replyResolver.GetDataXmlByDataChannelId(channelId);
                    if (dicContent.ContainsKey("deltaXml"))
                    {
                        dicContent["deltaXml"] = dataXml;
                    }
                    else
                    {
                        dicContent.Add("deltaXml", dataXml);
                    }
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        ///  组织业务过账消息（暂不实现）
        /// </summary>
        /// <remarks>TaskService.excute</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetDoEJBMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("SystemId"))
                {
                    dicContent.Add("SystemId", null);
                }
                if (!dicContent.ContainsKey("ModelId"))
                {
                    dicContent.Add("ModelId", null);
                }
                if (!dicContent.ContainsKey("FormId"))
                {
                    dicContent.Add("FormId", null);
                }
                if (!dicContent.ContainsKey("ControlId"))
                {
                    dicContent.Add("ControlId", null);
                }
                if (!dicContent.ContainsKey("DocCode"))
                {
                    dicContent.Add("DocCode", null);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织执行sql消息(丢弃)
        /// </summary>
        /// <remarks>DataService.execSQLAsyn</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetExecSQLMessage(Dictionary<string, object> dicContent)
        {
            return dicContent;
        }
        /// <summary>
        /// 组织根据sql得到数据消息（丢弃）
        /// </summary>
        /// <remarks>DataService.getDataBySql</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetDataBySqlMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("bzsystemid"))
                {
                    dicContent.Add("bzsystemid", null);
                }
                if (!dicContent.ContainsKey("openType"))
                {
                    dicContent.Add("openType", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("dataSetID"))
                {
                    dicContent.Add("dataSetID", null);
                }
                if (!dicContent.ContainsKey("reportID"))
                {
                    dicContent.Add("reportID", null);
                }
                if (!dicContent.ContainsKey("modelId"))
                {
                    dicContent.Add("modelId", null);
                }
                if (!dicContent.ContainsKey("fieldName"))
                {
                    dicContent.Add("fieldName", null);
                }
                if (!dicContent.ContainsKey("masterOnly"))
                {
                    dicContent.Add("masterOnly", null);
                }
                if (!dicContent.ContainsKey("whereArr"))
                {
                    dicContent.Add("whereArr", null);
                }
                if (!dicContent.ContainsKey("masterParam"))
                {
                    dicContent.Add("masterParam", null);
                }
                if (!dicContent.ContainsKey("deltaXml"))
                {
                    dicContent.Add("deltaXml", null);
                }
                if (!dicContent.ContainsKey("runUser"))
                {
                    dicContent.Add("runUser", null);
                }
                if (!dicContent.ContainsKey("shareFlag"))
                {
                    dicContent.Add("shareFlag", null);
                }
                if (!dicContent.ContainsKey("treeStr"))
                {
                    dicContent.Add("treeStr", null);
                }
                if (!dicContent.ContainsKey("saveType"))
                {
                    dicContent.Add("saveType", null);
                }
                if (!dicContent.ContainsKey("doccode"))
                {
                    dicContent.Add("doccode", null);
                }
                if (!dicContent.ContainsKey("clientId"))
                {
                    dicContent.Add("clientId", null);
                }
                if (!dicContent.ContainsKey("dataparam"))
                {
                    Dictionary<string, object> dicDataParam = new Dictionary<string, object>();
                    dicDataParam.Add("isdata", null);
                    dicDataParam.Add("mastername", null);
                    dicDataParam.Add("wheresql", null);
                    dicDataParam.Add("prooplist", null);
                    dicDataParam.Add("proplisted", null);
                    dicDataParam.Add("dataed", null);
                    dicDataParam.Add("pageno", null);
                    dicDataParam.Add("ispage", null);
                    dicDataParam.Add("getset", null);
                    dicContent.Add("dataparam", dicDataParam);
                }
                else
                {
                    Dictionary<string, object> dicDataParam = JsonHelper.ToObject<Dictionary<string, object>>(dicContent["dataparam"].ToString());
                    if (!dicDataParam.ContainsKey("isdata"))
                    {
                        dicDataParam.Add("isdata", null);
                    }
                    if (!dicDataParam.ContainsKey("mastername"))
                    {
                        dicDataParam.Add("mastername", null);
                    }
                    if (!dicDataParam.ContainsKey("wheresql"))
                    {
                        dicDataParam.Add("wheresql", null);
                    }
                    if (!dicDataParam.ContainsKey("prooplist"))
                    {
                        dicDataParam.Add("prooplist", null);
                    }
                    if (!dicDataParam.ContainsKey("proplisted"))
                    {
                        dicDataParam.Add("proplisted", null);
                    }
                    if (!dicDataParam.ContainsKey("dataed"))
                    {
                        dicDataParam.Add("dataed", null);
                    }
                    if (!dicDataParam.ContainsKey("pageno"))
                    {
                        dicDataParam.Add("pageno", null);
                    }
                    if (!dicDataParam.ContainsKey("ispage"))
                    {
                        dicDataParam.Add("ispage", null);
                    }
                    if (!dicDataParam.ContainsKey("getset"))
                    {
                        dicDataParam.Add("getset", null);
                    }
                    dicContent["dataparam"] = dicDataParam;
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织主档树消息
        /// </summary>
        /// <remarks>DataChannelService.getFilterMasterTree</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetFilterMasterTreeMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("systemid"))
                {
                    dicContent.Add("systemid", null);
                }
                if (!dicContent.ContainsKey("masterName"))
                {
                    dicContent.Add("masterName", null);
                }
                if (!dicContent.ContainsKey("currentRow"))
                {
                    dicContent.Add("currentRow", null);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 组织执行异步消息
        /// </summary>
        /// <remarks>BizDataService.executeAsyn</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetExecuteAsynMessage(Dictionary<string, object> dicContent)
        {
            try
            {
                if (!dicContent.ContainsKey("systemid"))
                {
                    dicContent.Add("systemid", null);
                }
                if (!dicContent.ContainsKey("controlid"))
                {
                    dicContent.Add("controlid", null);
                }
                if (!dicContent.ContainsKey("formid"))
                {
                    dicContent.Add("formid", null);
                }
                if (!dicContent.ContainsKey("doccode"))
                {
                    dicContent.Add("doccode", null);
                }
                if (!dicContent.ContainsKey("usercode"))
                {
                    dicContent.Add("usercode", null);
                }
                if (!dicContent.ContainsKey("flexObj"))
                {
                    Dictionary<object, object> dicFlexObj = new Dictionary<object, object>();
                    dicContent.Add("flexObj", dicFlexObj);
                }
                return dicContent;
            }
            catch (Exception)
            {
                throw;
            }
        }
        /// <summary>
        /// 得到服务时间
        /// </summary>
        /// <remarks>LinkBaseService.getServerDateTime</remarks>
        /// <param name="dicContent"></param>
        /// <returns></returns>
        private Dictionary<string, object> GetServerDateTimeMessage(Dictionary<string, object> dicContent)
        {
                return dicContent;
        }
    }
}

