//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成
//     如果重新生成代码，将丢失对此文件所做的更改。
// </auto-generated>
//------------------------------------------------------------------------------
namespace Victop.Frame.Connection
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Victop.Frame.CoreLibrary.Enums;
    using Victop.Frame.CoreLibrary.Models;
    using Victop.Frame.PublicLib.Helpers;
    using Victop.Frame.ServerManagerCenter;

	/// <summary>
	/// 消息实体管理
	/// </summary>
	/// <remarks>消息管理器</remarks>
	public class MessageBodyManager
	{
		/// <summary>
		/// 判定消息服务类型(本地/远程)
		/// </summary>
        private RegisterServerInfo CheckMessageServerType(RequestMessage messageInfo)
		{
            RegisterServerInfo serverInfo = null;
            ServerRouter serverRouter = new ServerRouter();
            ReplyMessage replyMessage = serverRouter.ServerRamify(messageInfo, RamifyEnum.CHECK);
            if (replyMessage != null)
            {
                serverInfo = JsonHelper.ToObject<RegisterServerInfo>(replyMessage.ReplyContent);
                
            }
            return serverInfo;
		}

		/// <summary>
		/// 运行本地服务
		/// </summary>
		private ReplyMessage RunLocalServer(RequestMessage messageInfo)
		{
            ServerRouter serverRouter = new ServerRouter();
            ReplyMessage replyMessage = serverRouter.ServerRamify(messageInfo, RamifyEnum.RUN);
            return replyMessage;
		}

		/// <summary>
		/// 发送远程服务请求
		/// </summary>
        private ReplyMessage SendMessageToRemote(RequestMessage messageInfo, DataFormEnum dataForm)
		{
            MessageTransmitManager messageTransmitManager = new MessageTransmitManager();
            ReplyMessage replyMessage = messageTransmitManager.SendRmoteMessage(messageInfo,dataForm);
            return replyMessage;
		}

		/// <summary>
		/// 消息发送
		/// </summary>
		public virtual ReplyMessage SendMessage(RequestMessage messageInfo,DataFormEnum dataForm)
		{
            RegisterServerInfo serverInfo = CheckMessageServerType(messageInfo);
            ReplyMessage replyMessage = null;
            switch (serverInfo.ServerType)
            {
                case ServerTypeEnum.LOCAL:
                    Dictionary<string, object> contentDic = JsonHelper.ToObject<Dictionary<string, object>>(messageInfo.MessageContent);
                    string serverInfoStr = JsonHelper.ToJson(serverInfo);
                    contentDic.Add("ServerInfo", serverInfoStr);
                    messageInfo.MessageContent = JsonHelper.ToJson(contentDic);
                    replyMessage = RunLocalServer(messageInfo);
                    break;
                case ServerTypeEnum.SERVER:
                default:
                    replyMessage = SendMessageToRemote(messageInfo, dataForm);
                    break;
            }
            return replyMessage;
		}

	}
}

